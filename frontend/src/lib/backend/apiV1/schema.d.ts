/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/notices/{noticeId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 공지사항 게시글 수정
         * @description 게시글 수정 작성사항: 제목, 내용, 파일
         */
        put: operations["updateNotice"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/residents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["registerResidentVehicle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/foreigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["registerForeignVehicle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/userreg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그아웃
         * @description Token 제거합니다.
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile-images/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 프로필 이미지 등록/수정
         * @description 사용자가 자신의 프로필 사진을 업로드합니다.
         */
        post: operations["uploadProfileImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/opinion/{userId}/manager": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["addManagerOpinion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notices/media/images/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 공지사항 게시글 이미지 등록
         * @description 공지사항 에디터에 사용될 이미지를 업로드합니다.
         */
        post: operations["uploadImages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notices/media/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 공지사항 게시글 파일 등록
         * @description 공지사항에 첨부할 파일을 업로드합니다.
         */
        post: operations["uploadFiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notices/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 공지사항 게시글 등록
         * @description 게시글 작성사항: 제목, 내용, 파일
         */
        post: operations["createNotice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inspection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["showAllInspections"];
        put?: never;
        post: operations["createInspectionSchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inspection/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["updateInspectionSchedule"];
        delete: operations["deleteInspectionSchedule"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/{facilityId}/reserve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 유저 공용시설 예약하기
         * @description 유저가 등록된 공용시설을 예약하기
         */
        post: operations["reserveFacility"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaint/feedback/save": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 민원에 대한 피드백을 저장하는 기능
         * @description 입력된 피드백을 DB에 저장하는 기능
         */
        post: operations["saveComplaintFeedback"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaint/create/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 유저의 민원을 생성하는 기능
         * @description 유저가 입력한 정보를 기반으로 민원을 생성하는 기능
         */
        post: operations["createComplaint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 인증번호 확인
         * @description 발송된 인증번호를 확인합니다.
         */
        post: operations["verifyCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/send-verification-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 인증번호 발송
         * @description 이메일로 인증번호를 발송합니다.
         */
        post: operations["sendVerificationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/check-phone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 휴대폰 번호 중복 확인
         * @description 휴대폰 번호의 중복 여부를 확인합니다.
         */
        post: operations["checkPhone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/check-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 이메일 중복 확인
         * @description 이메일 주소의 중복 여부를 확인합니다.
         */
        post: operations["checkEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/update/{vehicleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateVehicle"];
        trace?: never;
    };
    "/api/v1/myInfos/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 내 정보 수정
         * @description 사용자의 닉네임, 전화번호, 학원 정보를 수정합니다.
         */
        patch: operations["updateMyInfo"];
        trace?: never;
    };
    "/api/v1/facilities/{facilityReservationId}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 유저 예약 취소
         * @description 유저가 예약한 공용시설을 예약 취소하기
         */
        patch: operations["cancelReservation"];
        trace?: never;
    };
    "/api/v1/facilities/manager/reservations/{facilityReservationId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 유저들의 예약 상태 변경
         * @description 유저들의 예약 상태 pending/agree/reject로 변경하기
         */
        patch: operations["changeReservationStatus"];
        trace?: never;
    };
    "/api/v1/entry-records/{entryRecordId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateEntryStatus"];
        trace?: never;
    };
    "/api/v1/complaint/update/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 유저의 민원을 수정하는 기능
         * @description 유저가 입력한 정보를 기반으로 민원을 수정하는 기능
         */
        patch: operations["updateComplaint"];
        trace?: never;
    };
    "/api/v1/complaint/update/status/{complainId}/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 유저의 민원 상태를 수정하는 기능
         * @description 매니저가 민원 처리 여부에 따른 상태 변경을 위한 기능
         */
        patch: operations["updateComplaintStatus"];
        trace?: never;
    };
    "/api/v1/complaint/feedback/update/{feedbackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 민원 피드백을 수정하는 기능
         * @description 민원에 대한 피드백을 수정하는 기능
         */
        patch: operations["updateComplaintFeedback"];
        trace?: never;
    };
    "/api/v1/vehicles/resident": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getResidentVehicles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/registrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getVehicleRegistrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/registrationsWithStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRegistrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/foreign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getForeignVehicles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/approved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApprovedVehicles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/check-phonenum": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 휴대폰 번호 중복 확인
         * @description 휴대폰 번호 중복 여부를 확인합니다.
         */
        get: operations["checkPhoneNum"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/check-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 이메일 중복 확인
         * @description 이메일의 중복 여부를 확인합니다.
         */
        get: operations["checkEmail_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/opinion/manager": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getManagerOpinion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 매니저 권한/ 공지사항 게시글 목록 조회
         * @description 매니저 권한 - 전체
         */
        get: operations["getNoticeList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notices/{noticeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 공지사항 게시글 조회
         * @description 게시글 조회사항: 제목, 작성자, 작성일, 조회수, 내용, 파일
         */
        get: operations["readNotice"];
        put?: never;
        post?: never;
        /**
         * 공지사항 게시글 삭제
         * @description 게시글 삭제(INACTIVE 상태)
         */
        delete: operations["deleteNotice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notices/user/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 권한/ 공지사항 게시글 목록 조회
         * @description 사용자 권한 - 전체공지와 사용자 동
         */
        get: operations["getUserNotices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/myInfos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 정보 조회
         * @description 사용자의 프로필 정보를 조회합니다.
         */
        get: operations["getMyInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 공용시설 목록 조회
         * @description 등록된 공용시설 목록 조희
         */
        get: operations["getAllFacilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/statistics/user-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자별 이용 횟수 통계
         * @description 사용자 기준으로 이용 횟수를 집계하여 순위별로 제공합니다.
         */
        get: operations["getUserUsageCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/statistics/time-period": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시간대별 이용 통계
         * @description 시간대(오전/오후/저녁/야간) 기준으로 이용 건수를 분석합니다. 시간대 기준::: 오전: 05~12시, 오후: 12~17시, 저녁: 17~23시, 야간: 23~05시
         */
        get: operations["getTimePeriodCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/statistics/reservation-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 예약 상태별 현황
         * @description AGREE, REJECT, CANCEL, PENDING 상태별 예약 건수를 조회합니다.
         */
        get: operations["getReservationStatusCounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/statistics/facility-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시설별 이용 횟수 통계
         * @description 가장 많이 이용된 시설부터 순위대로 반환합니다.
         */
        get: operations["getFacilityUsageCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/statistics/day-of-week": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 요일별 이용 통계
         * @description 요일 기준으로 이용 건수를 분석합니다.
         */
        get: operations["getDayOfWeekCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/statistics/cancellation-ratio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 예약 취소율
         * @description status=CANCEL / 전체 예약 (%)
         */
        get: operations["getCancellationRatio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/statistics/building-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 동별 이용 횟수 통계
         * @description 동(건물번호) 기준으로 이용 횟수를 집계하여 제공합니다.
         */
        get: operations["getBuildingUsageCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 유저 예약 조회
         * @description 유저가 예약한 공용시설 예약 조회(전체보기, 시설, 예약 상태, 날짜 필터링 가능)
         */
        get: operations["getUserReservations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/manager/reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 유저들의 예약 목록 조회
         * @description 유저들의 예약 목록 조희 - 전체보기, 시설별, 예약상태별, 날짜별
         */
        get: operations["getReservations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaint/feedback/{complaintId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 민원에 대한 피드백을 읽어오는 기능
         * @description 해당 민원에 맞는 피드백을 전부 읽어 제공하는 기능
         */
        get: operations["getComplaintFeedback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaint/all/complaint/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 유저의 민원들을 가져오는 기능
         * @description 유저의 Id를 통해 유저의 민원들을 가져오는 기능
         */
        get: operations["getAllComplaint"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaint/all/complaint/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 유저들의 민원을 가져오는 기능
         * @description 매니저가 유저의 민원을 확인하기 위한 기능
         */
        get: operations["getAllComplaint_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/home": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["home"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/check-social-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["checkSocialSession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/apartments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 아파트 목록 조회
         * @description 모든 아파트 목록을 조회합니다.
         */
        get: operations["getAllApartments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/apartments/{apartmentId}/buildings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 동 목록 조회
         * @description 특정 아파트의 모든 동 목록을 조회합니다.
         */
        get: operations["getBuildingsByApartment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/apartments/buildings/{buildingId}/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 호수 목록 조회
         * @description 특정 동의 모든 호수 목록을 조회합니다.
         */
        get: operations["getUnitsByBuilding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/delete/{vehicleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteVehicle"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 회원 탈퇴
         * @description 비밀번호 확인 후 회원 비활성화 처리
         */
        delete: operations["withdrawUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile-images/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 프로필 이미지 삭제
         * @description 사용자의 프로필 이미지를 삭제합니다.
         */
        delete: operations["deleteProfileImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notices/media/images/{noticeImageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 임시 이미지 삭제
         * @description 사용자가 업로드한 임시 이미지를 삭제합니다.
         */
        delete: operations["deleteImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notices/media/files/{noticeFileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 임시 파일 삭제
         * @description 사용자가 업로드한 임시 파일을 삭제합니다.
         */
        delete: operations["deleteFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaint/feedback/delete/{feedbackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteComplaintFeedback"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaint/delete/{complainId}/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 유저의 민원을 삭제하는 기능
         * @description 선택한 민원을 삭제하는 기능
         */
        delete: operations["deleteComplaint"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["logout_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description 공지사항 게시글 수정 요청 DTO */
        NoticeUpdateRequestDto: {
            /**
             * @description 게시글 제목
             * @example 엘레베이터 정기점검 안내
             */
            title?: string;
            /**
             * @description 게시글 내용
             * @example 점검일시: 2025년 5월 15일 14시 ~ 16시
             */
            content?: string;
            /** @description tiptap에 삽입된 이미지 ID들 */
            imageIds?: number[];
            /** @description tiptap에 삽입된 첨부파일 ID들 */
            fileIds?: number[];
        };
        ResidentVehicleRequestDto: {
            /** Format: int64 */
            userId?: number;
            vehicleNum?: string;
            type?: string;
        };
        VehicleResponseDto: {
            vehicleNum?: string;
            type?: string;
            userPhone?: string;
            buildingName?: string;
            unitName?: string;
            reason?: string;
        };
        ForeignVehicleRequestDto: {
            vehicleNum?: string;
            type?: string;
            phone?: string;
            reason?: string;
        };
        /** @description 회원가입 시 입력하는 사용자 정보 DTO */
        UserRegistRequestDTO: {
            /**
             * @description 사용자 이메일
             * @example user@example.com
             */
            email?: string;
            /**
             * @description 비밀번호 (8자 이상, 영문자, 숫자, 특수문자 포함)
             * @example password123!
             */
            password?: string;
            /**
             * @description 사용자 이름
             * @example 홍길동
             */
            userName?: string;
            /**
             * Format: int64
             * @description 아파트 ID
             * @example 1
             */
            apartmentId: number;
            /**
             * Format: int64
             * @description 동 ID
             * @example 1
             */
            buildingId: number;
            /**
             * Format: int64
             * @description 호 ID
             * @example 1
             */
            unitId: number;
            /**
             * @description 휴대폰 번호
             * @example 01012345678
             */
            phoneNum?: string;
            /**
             * @description 소셜 로그인 제공자
             * @example kakao
             */
            socialProvider?: string;
            /**
             * @description 소셜 로그인 아이디
             * @example 1234567890
             */
            socialId?: string;
            /**
             * @description 프로필 이미지
             * @example https://example.com/profile.jpg
             */
            profileImage?: string;
        };
        CreateManagerOpinionRequestDto: {
            content?: string;
        };
        /** @description 공지사항 게시글 등록 요청 DTO */
        NoticeCreateRequestDto: {
            /**
             * @description 게시글 제목
             * @example 엘레베이터 정기점검 안내
             */
            title?: string;
            /**
             * @description 게시글 내용
             * @example 점검일시: 2025년 5월 15일 14시 ~ 16시
             */
            content?: string;
            /**
             * Format: int64
             * @description 게시글 대상: 전체/동별 선택 - buildingId
             * @example 101동 / null일 경우 전체 공지
             */
            buildingId?: number;
            /** @description tiptap에 삽입된 이미지 ID들 */
            imageIds?: number[];
            /** @description tiptap에 삽입된 첨부파일 ID들 */
            fileIds?: number[];
        };
        InspectionRequestDto: {
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            finishAt?: string;
            detail?: string;
            type?: string;
        };
        Apartment: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            name?: string;
            address?: string;
        };
        Building: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            apartment?: components["schemas"]["Apartment"];
            buildingNumber?: string;
            units?: components["schemas"]["Unit"][];
        };
        Image: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            user?: components["schemas"]["User"];
            filePath?: string;
            tempId?: string;
            isTemp?: boolean;
            isDeleted?: boolean;
            originalName?: string;
            storedName?: string;
            path?: string;
            /** Format: int64 */
            size?: number;
            contentType?: string;
            isTemporary?: boolean;
            /** Format: date-time */
            expiresAt?: string;
            s3Key?: string;
        };
        Inspection: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            user?: components["schemas"]["User"];
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            finishAt?: string;
            type?: components["schemas"]["InspectionType"];
            detail?: string;
            /** @enum {string} */
            result?: "CHECKED" | "PENDING" | "NOTYET";
        };
        InspectionType: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            typeName?: string;
        };
        Unit: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            building?: components["schemas"]["Building"];
            unitNumber?: string;
        };
        User: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            apartment?: components["schemas"]["Apartment"];
            building?: components["schemas"]["Building"];
            unit?: components["schemas"]["Unit"];
            /** Format: int64 */
            gradeId?: number;
            socialProvider?: string;
            socialId?: string;
            roles?: ("ADMIN" | "USER" | "MODERATOR")[];
            password?: string;
            email?: string;
            phoneNum?: string;
            userName?: string;
            /**
             * @description 상태
             * @enum {string}
             */
            status?: "active" | "inactive" | "pending";
            refreshToken?: string;
            profileImage?: components["schemas"]["Image"];
        };
        InspectionUpdateDto: {
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            finishAt?: string;
            detail?: string;
            type?: string;
            result?: string;
        };
        /** @description 공용시설 예약 요청 DTO */
        FacilityReservationRequestDto: {
            /**
             * Format: date
             * @description 예약할 날짜
             * @example 2025-05-15
             */
            date?: string;
            /**
             * @description 예약 시작 시간
             * @example 09:00:00
             */
            startTime?: string;
            /**
             * @description 예약 종료 시간
             * @example 11:00:00
             */
            endTime?: string;
        };
        CreateComplaintFeedbackRequestDto: {
            /** Format: int64 */
            complaintId?: number;
            content?: string;
        };
        CreateComplaintRequestDto: {
            title?: string;
            content?: string;
            category?: string;
        };
        /** @description 인증번호 확인 요청 DTO */
        VerifyCodeRequestDto: {
            /**
             * @description 인증번호를 확인할 이메일 주소
             * @example user@example.com
             */
            email?: string;
            /**
             * @description 확인할 인증번호
             * @example 123456
             */
            code?: string;
        };
        /** @description 인증번호 확인 응답 DTO */
        VerifyCodeResponseDto: {
            /**
             * @description 인증번호 확인 결과 메시지
             * @example 인증이 완료되었습니다.
             */
            message?: string;
            /**
             * @description 인증번호 확인 성공 여부
             * @example true
             */
            verified?: boolean;
        };
        /** @description 인증번호 발송 요청 DTO */
        VerificationCodeRequestDto: {
            /**
             * @description 인증번호를 발송할 이메일 주소
             * @example user@example.com
             */
            email?: string;
        };
        /** @description 인증번호 발송 응답 DTO */
        VerificationCodeResponseDto: {
            /**
             * @description 인증번호 발송 결과 메시지
             * @example 인증번호가 발송되었습니다. 이메일을 확인해주세요.
             */
            message?: string;
            /**
             * @description 인증번호 발송 성공 여부
             * @example true
             */
            success?: boolean;
        };
        LoginRequestDto: {
            email?: string;
            password?: string;
        };
        /** @description 휴대폰 번호 중복 확인 요청 DTO */
        PhoneCheckRequestDto: {
            /**
             * @description 확인할 휴대폰 번호
             * @example 01012345678
             */
            phoneNumber?: string;
        };
        /** @description 휴대폰 번호 중복 확인 응답 DTO */
        PhoneCheckResponseDto: {
            /**
             * @description 휴대폰 번호 중복 확인 결과 메시지
             * @example 사용 가능한 휴대폰 번호입니다.
             */
            message?: string;
            /**
             * @description 휴대폰 번호 사용 가능 여부
             * @example true
             */
            available?: boolean;
        };
        /** @description 이메일 중복 확인 요청 DTO */
        EmailCheckRequestDto: {
            /**
             * @description 확인할 이메일 주소
             * @example user@example.com
             */
            email?: string;
        };
        /** @description 이메일 중복 확인 응답 DTO */
        EmailCheckResponseDto: {
            /**
             * @description 이메일 중복 확인 결과 메시지
             * @example 사용 가능한 이메일입니다.
             */
            message?: string;
            /**
             * @description 이메일 사용 가능 여부
             * @example true
             */
            available?: boolean;
        };
        VehicleUpdateRequestDto: {
            vehicleNum?: string;
            type?: string;
        };
        /** @description 학원 정보 요청 DTO */
        MyInfoUpdateRequestDto: {
            /**
             * @description 수정할 이름
             * @example 홍길동
             */
            userName?: string;
            /**
             * @description 수정할 전화번호
             * @example 01012345678
             */
            phoneNum?: string;
            /**
             * @description 수정할 아파트
             * @example 홍길동
             */
            apartment?: components["schemas"]["Apartment"];
            /**
             * @description 수정할 건물
             * @example 101동
             */
            building?: components["schemas"]["Building"];
            /**
             * @description 수정할 호수
             * @example 101호
             */
            unit?: components["schemas"]["Unit"];
        };
        EntryRecordStatusDto: {
            /** Format: int64 */
            id?: number;
            status?: string;
        };
        VehicleRegistrationInfoDto: {
            /** Format: int64 */
            id?: number;
            registerType?: string;
            applicantName?: string;
            buildingName?: string;
            unitName?: string;
            vehicleNum?: string;
            type?: string;
            phone?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            visitPeriod?: string;
            reason?: string;
            userPhone?: string;
            status?: string;
        };
        /** @description 매니저 권한 - 공지사항 게시글 목록 조회 응답 DTO */
        NoticeSummaryResponseDto: {
            /**
             * Format: int64
             * @description 게시글 번호
             * @example 1
             */
            noticeId?: number;
            /**
             * @description 게시글 제목
             * @example 엘레베이터 정기점검 안내
             */
            title?: string;
            /**
             * @description 게시글 작성자
             * @example 관리사무소
             */
            authorName?: string;
            /**
             * Format: int64
             * @description 게시글 대상: 전체/동별 선택 - buildingId
             * @example 1
             */
            buildingId?: number;
            /**
             * Format: date-time
             * @description 게시글 작성일
             * @example 2025-05-15 09:00
             */
            createdAt?: string;
            /**
             * Format: int64
             * @description 게시글 조회수
             * @example 0
             */
            viewCount?: number;
        };
        PageNoticeSummaryResponseDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["NoticeSummaryResponseDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            numberOfElements?: number;
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            unpaged?: boolean;
            paged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
        };
        SortObject: {
            empty?: boolean;
            unsorted?: boolean;
            sorted?: boolean;
        };
        NoticeFileDto: {
            originalName?: string;
            downloadUrl?: string;
            /** Format: int64 */
            size?: number;
        };
        /** @description 공지사항 게시글 조회 응답 DTO */
        NoticeReadResponseDto: {
            /**
             * Format: int64
             * @description 게시글 번호
             * @example 1
             */
            noticeId?: number;
            /**
             * @description 게시글 제목
             * @example 엘레베이터 정기점검 안내
             */
            title?: string;
            /**
             * @description 게시글 내용
             * @example 점검일시: 2025년 5월 15일 14시 ~ 16시
             */
            content?: string;
            /**
             * @description 게시글 작성자
             * @example 관리사무소
             */
            authorName?: string;
            /**
             * Format: date-time
             * @description 게시글 작성일
             * @example 2025-05-15 09:00
             */
            createdAt?: string;
            /**
             * Format: int64
             * @description 게시글 조회수
             * @example 0
             */
            viewCount?: number;
            /**
             * @description 게시글 첨부 이미지
             * @example 엘레베이터.jpg
             */
            imageUrls?: string[];
            /**
             * @description 게시글 첨부 파일
             * @example 엘레베이터_점검_안내문.pdf
             */
            fileUrls?: components["schemas"]["NoticeFileDto"][];
        };
        PageUserNoticeSummaryResponseDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["UserNoticeSummaryResponseDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            numberOfElements?: number;
            empty?: boolean;
        };
        /** @description 매니저 권한 - 공지사항 게시글 목록 조회 응답 DTO */
        UserNoticeSummaryResponseDto: {
            /**
             * Format: int64
             * @description 게시글 번호
             * @example 1
             */
            noticeId?: number;
            /**
             * @description 게시글 제목
             * @example 엘레베이터 정기점검 안내
             */
            title?: string;
            /**
             * @description 게시글 작성자
             * @example 관리사무소
             */
            authorName?: string;
            /**
             * Format: date-time
             * @description 게시글 작성일
             * @example 2025-05-15 09:00
             */
            createdAt?: string;
            /**
             * Format: int64
             * @description 게시글 조회수
             * @example 0
             */
            viewCount?: number;
        };
        /** @description 사용자 정보 응답 DTO */
        MyInfoResponseDto: {
            /**
             * @description 계정 이메일
             * @example lion@gmail.com
             */
            email?: string;
            /**
             * @description 사용자 이름
             * @example 홍길동
             */
            userName?: string;
            /**
             * @description 사용자 전화번호
             * @example 010-1234-5678
             */
            phoneNum?: string;
            /**
             * Format: date-time
             * @description 계정 생성 시각
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description 계정 수정 시각
             */
            modifiedAt?: string;
            /** @description 프로필 이미지 url */
            profileImageUrl?: string;
        };
        /** @description 공용시설 목록 응답 DTO */
        FacilityResponseDto: {
            /**
             * @description 공용시설 이름
             * @example 헬스장
             */
            name?: string;
            /**
             * @description 공용시설 설명
             * @example 24시간 이용가능한 피트니스 센터
             */
            description?: string;
        };
        /** @description 공용시설 사용자별 이용 횟수 DTO */
        UserUsageCountDto: {
            /**
             * @description 사용자 이름
             * @example 짱구
             */
            userName?: string;
            /**
             * @description 사용자 주소(동)
             * @example 101동
             */
            buildingNumber?: string;
            /**
             * @description 사용자 주소(호수)
             * @example 202호
             */
            unitNumber?: string;
            /**
             * Format: int64
             * @description 공용시설 이용 횟수
             * @example 5
             */
            reservationCount?: number;
        };
        /** @description 공용시설 시간대별 이용 횟수 DTO */
        TimePeriodUsageDto: {
            /**
             * @description 시간대
             * @example 오전/오후/저녁/야간
             */
            timePeriod?: string;
            /**
             * Format: int64
             * @description 공용시설 이용 횟수
             * @example 5
             */
            reservationCount?: number;
        };
        /** @description 공용시설 예약 상태 현황 DTO */
        ReservationStatusCountDto: {
            /**
             * @description 예약 상태
             * @example AGREE / PENDING / REJECT / CANCEL
             * @enum {string}
             */
            status?: "AGREE" | "PENDING" | "REJECT" | "CANCEL";
            /**
             * Format: int64
             * @description 횟수
             * @example 5
             */
            count?: number;
        };
        /** @description 공용시설 시설별 이용 횟수 DTO */
        FacilityUsageCountDto: {
            /**
             * @description 공용시설 이름
             * @example 헬스장
             */
            facilityName?: string;
            /**
             * Format: int64
             * @description 공용시설 이용 횟수
             * @example 5
             */
            reservationCount?: number;
        };
        /** @description 공용시설 요일별 이용 횟수 DTO */
        DayOfWeekUsageDto: {
            /**
             * @description 요일
             * @example 월요일
             */
            dayOfWeek?: string;
            /**
             * Format: int64
             * @description 공용시설 이용 횟수
             * @example 5
             */
            reservationCount?: number;
        };
        /** @description 공용시설 취소율 DTO */
        CancellationRatioDto: {
            /**
             * Format: int64
             * @description 전체 예약 수
             * @example 10
             */
            totalReservations?: number;
            /**
             * Format: int64
             * @description 취소된 예약 수
             * @example 2
             */
            totalCancelled?: number;
            /**
             * Format: double
             * @description 취소율
             * @example 0.2
             */
            cancellationRatio?: number;
        };
        /** @description 공용시설 동별 이용 횟수 DTO */
        BuildingUsageCountDto: {
            /**
             * @description 사용자 주소(동)
             * @example 101동
             */
            buildingNumber?: string;
            /**
             * Format: int64
             * @description 공용시설 이용 횟수
             * @example 5
             */
            reservationCount?: number;
        };
        /** @description 공용시설 예약 조회 [사용자] 응답 DTO */
        FacilityReservationSummaryDto: {
            /**
             * @description 예약한 공용시설 이름
             * @example 헬스장
             */
            facilityName?: string;
            /**
             * @description 예약 일시
             * @example 2025-05-15 09:00-11:00
             */
            reservationTime?: string;
            /**
             * @description 신청 일시
             * @example 2025-05-13 10:10
             */
            createdAt?: string;
            /**
             * @description 예약 상태
             * @example PENDING
             */
            status?: string;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        /** @description 공용시설 예약 조회 [관리자] 응답 DTO */
        FacilityReservationManagerDto: {
            /**
             * @description 신청자 이름
             * @example 신짱구
             */
            userName?: string;
            /**
             * @description 신청자 주소(동)
             * @example 101동
             */
            building?: string;
            /**
             * @description 신청자 주소(호수)
             * @example 202호
             */
            unit?: string;
            /**
             * @description 예약한 공용시설 이름
             * @example 헬스장
             */
            facilityName?: string;
            /**
             * @description 예약 일시
             * @example 2025-05-15 09:00-11:00
             */
            reservationTime?: string;
            /**
             * @description 신청 일시
             * @example 2025-05-13 10:10
             */
            createdAt?: string;
            /**
             * @description 예약 상태
             * @example PENDING
             */
            status?: string;
        };
        PageFacilityReservationManagerDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["FacilityReservationManagerDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            numberOfElements?: number;
            empty?: boolean;
        };
        /** @description 아파트 정보 응답 DTO */
        ApartmentResponseDto: {
            /**
             * Format: int64
             * @description 아파트 ID
             * @example 1
             */
            id?: number;
            /**
             * @description 아파트 이름
             * @example 현대아파트
             */
            name?: string;
            /**
             * @description 아파트 주소
             * @example 서울특별시 강남구 역삼동 123
             */
            address?: string;
        };
        /** @description 건물(동) 정보 응답 DTO */
        BuildingResponseDto: {
            /**
             * Format: int64
             * @description 건물 ID
             * @example 1
             */
            id?: number;
            /**
             * @description 건물 번호(동)
             * @example 101동
             */
            buildingNumber?: string;
            /**
             * Format: int64
             * @description 아파트 ID
             * @example 1
             */
            apartmentId?: number;
        };
        /** @description 호수 정보 응답 DTO */
        UnitResponseDto: {
            /**
             * Format: int64
             * @description 호수 ID
             * @example 1
             */
            id?: number;
            /**
             * @description 호수
             * @example 101호
             */
            unitNumber?: string;
            /**
             * Format: int64
             * @description 건물 ID
             * @example 1
             */
            buildingId?: number;
        };
        /** @description 회원 탈퇴 요청 DTO */
        DeleteUserRequestDto: {
            /**
             * @description 현재 비밀번호
             * @example mySecurePassword
             */
            password?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateNotice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoticeUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    registerResidentVehicle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResidentVehicleRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleResponseDto"];
                };
            };
        };
    };
    registerForeignVehicle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForeignVehicleRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleResponseDto"];
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRegistRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 로그아웃 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description 인증되지 않은 사용자 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    uploadProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    multipartFile: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    addManagerOpinion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateManagerOpinionRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    uploadImages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    arg1: string[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": number[];
                };
            };
        };
    };
    uploadFiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    arg1: string[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": number[];
                };
            };
        };
    };
    createNotice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoticeCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    showAllInspections: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Inspection"][];
                };
            };
        };
    };
    createInspectionSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InspectionRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Inspection"];
                };
            };
        };
    };
    updateInspectionSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InspectionUpdateDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    deleteInspectionSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    reserveFacility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FacilityReservationRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    saveComplaintFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateComplaintFeedbackRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    createComplaint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateComplaintRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    verifyCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyCodeRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VerifyCodeResponseDto"];
                };
            };
        };
    };
    sendVerificationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerificationCodeRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VerificationCodeResponseDto"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    checkPhone: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PhoneCheckRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PhoneCheckResponseDto"];
                };
            };
        };
    };
    checkEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailCheckRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmailCheckResponseDto"];
                };
            };
        };
    };
    updateVehicle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VehicleUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateMyInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MyInfoUpdateRequestDto"];
            };
        };
        responses: {
            /** @description 정보 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description 입력 값 오류 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    cancelReservation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityReservationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    changeReservationStatus: {
        parameters: {
            query: {
                status: string;
            };
            header?: never;
            path: {
                facilityReservationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    updateEntryStatus: {
        parameters: {
            query: {
                status: "AGREE" | "INAGREE" | "PENDING";
            };
            header?: never;
            path: {
                entryRecordId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntryRecordStatusDto"];
                };
            };
        };
    };
    updateComplaint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateComplaintRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateComplaintStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateComplaintFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateComplaintFeedbackRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getResidentVehicles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleResponseDto"][];
                };
            };
        };
    };
    getVehicleRegistrations: {
        parameters: {
            query?: {
                isForeign?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleRegistrationInfoDto"][];
                };
            };
        };
    };
    getRegistrations: {
        parameters: {
            query?: {
                isForeign?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleRegistrationInfoDto"][];
                };
            };
        };
    };
    getForeignVehicles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleResponseDto"][];
                };
            };
        };
    };
    getApprovedVehicles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleRegistrationInfoDto"][];
                };
            };
        };
    };
    checkPhoneNum: {
        parameters: {
            query: {
                phoneNum: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 사용 가능 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
            /** @description 중복됨 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
        };
    };
    checkEmail_1: {
        parameters: {
            query: {
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 사용 가능 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
            /** @description 중복됨 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
        };
    };
    getManagerOpinion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getNoticeList: {
        parameters: {
            query?: {
                buildingId?: number;
                startDate?: string;
                endDate?: string;
                page?: number;
                size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageNoticeSummaryResponseDto"];
                };
            };
        };
    };
    readNotice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["NoticeReadResponseDto"];
                };
            };
        };
    };
    deleteNotice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getUserNotices: {
        parameters: {
            query?: {
                buildingId?: number;
                startDate?: string;
                endDate?: string;
                page?: number;
                size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageUserNoticeSummaryResponseDto"];
                };
            };
        };
    };
    getMyInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정보 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MyInfoResponseDto"];
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MyInfoResponseDto"];
                };
            };
        };
    };
    getAllFacilities: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilityResponseDto"][];
                };
            };
        };
    };
    getUserUsageCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserUsageCountDto"][];
                };
            };
        };
    };
    getTimePeriodCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TimePeriodUsageDto"][];
                };
            };
        };
    };
    getReservationStatusCounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ReservationStatusCountDto"][];
                };
            };
        };
    };
    getFacilityUsageCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilityUsageCountDto"][];
                };
            };
        };
    };
    getDayOfWeekCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DayOfWeekUsageDto"][];
                };
            };
        };
    };
    getCancellationRatio: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CancellationRatioDto"];
                };
            };
        };
    };
    getBuildingUsageCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BuildingUsageCountDto"][];
                };
            };
        };
    };
    getUserReservations: {
        parameters: {
            query?: {
                date?: string;
                facilityId?: number;
                status?: "AGREE" | "PENDING" | "REJECT" | "CANCEL";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilityReservationSummaryDto"][];
                };
            };
        };
    };
    getReservations: {
        parameters: {
            query: {
                date?: string;
                facilityId?: number;
                status?: string;
                arg3: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageFacilityReservationManagerDto"];
                };
            };
        };
    };
    getComplaintFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getAllComplaint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getAllComplaint_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    home: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    checkSocialSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getAllApartments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApartmentResponseDto"][];
                };
            };
        };
    };
    getBuildingsByApartment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apartmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BuildingResponseDto"][];
                };
            };
        };
    };
    getUnitsByBuilding: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                buildingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UnitResponseDto"][];
                };
            };
        };
    };
    deleteVehicle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    withdrawUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteUserRequestDto"];
            };
        };
        responses: {
            /** @description 회원 탈퇴 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description 비밀번호 불일치 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    deleteProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    deleteImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeImageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeFileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteComplaintFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    deleteComplaint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    logout_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
}
