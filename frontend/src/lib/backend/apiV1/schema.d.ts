/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/opinions/reply/{replyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateOpinionReply"];
        post?: never;
        delete: operations["deleteOpinionReply"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaints/{complaintId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 민원 수정
         * @description 민원 ID로 기존 민원을 수정합니다
         */
        put: operations["updateComplaint"];
        post?: never;
        /**
         * 민원 삭제
         * @description 민원 ID를 이용해 민원을 삭제합니다
         */
        delete: operations["deleteComplaint"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaint-feedbacks/{feedbackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 민원 피드백 수정
         * @description 기존 민원 피드백을 수정합니다
         */
        put: operations["updateComplaintFeedback"];
        post?: never;
        /**
         * 민원 피드백 삭제
         * @description 특정 피드백 ID를 가진 민원 피드백을 삭제합니다
         */
        delete: operations["deleteComplaintFeedback"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/update/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 해당 입주민이 작성한 글 수정 */
        put: operations["update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/notices/{noticeId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 공지사항 게시글 수정
         * @description 게시글 수정 작성사항: 제목, 내용, 파일
         */
        put: operations["updateNotice"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/menu/menus/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMenuById"];
        put: operations["updateMenu"];
        post?: never;
        delete: operations["deleteMenu"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/menu/grades/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getGradeById"];
        put: operations["updateGrade"];
        post?: never;
        delete: operations["deleteGrade"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/menu/grades/{id}/menus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMenuIdsByGradeId"];
        put: operations["assignMenusToGrade"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/menu/grades/{id}/menus/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["assignMenusWithOrderToGrade"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/{facilityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 공용시설 단건 조회 [관리자] */
        get: operations["getFacility"];
        /** 공용시설 수정 */
        put: operations["updateFacility"];
        post?: never;
        /** 시설 삭제(비활성화) */
        delete: operations["deleteFacility"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/{facilityId}/instructors/{instructorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 강사 단건 조회 */
        get: operations["getInstructor"];
        /** 강사 정보 수정 */
        put: operations["updateInstructor"];
        post?: never;
        /** 강사 삭제 (비활성화) */
        delete: operations["deleteInstructor"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/apartments/{apartmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [관리자] 아파트 상세 조회
         * @description 특정 아파트 정보를 ID로 조회합니다.
         */
        get: operations["getApartmentById"];
        /**
         * [관리자] 아파트 수정
         * @description 기존 아파트 정보를 수정합니다.
         */
        put: operations["updateApartment"];
        post?: never;
        /**
         * [관리자] 아파트 삭제
         * @description 특정 아파트를 삭제합니다.
         */
        delete: operations["deleteApartment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/apartments/units/{unitId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [관리자] 호수 상세 조회
         * @description 특정 호수 정보를 ID로 조회합니다.
         */
        get: operations["getUnitById"];
        /**
         * [관리자] 호수 수정
         * @description 기존 호수 정보를 수정합니다.
         */
        put: operations["updateUnit"];
        post?: never;
        /**
         * [관리자] 호수 삭제
         * @description 특정 호수를 삭제합니다.
         */
        delete: operations["deleteUnit"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/apartments/buildings/{buildingId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [관리자] 동 상세 조회
         * @description 특정 동 정보를 ID로 조회합니다.
         */
        get: operations["getBuildingById"];
        /**
         * [관리자] 동 수정
         * @description 기존 동 정보를 수정합니다.
         */
        put: operations["updateBuilding"];
        post?: never;
        /**
         * [관리자] 동 삭제
         * @description 특정 동을 삭제합니다.
         */
        delete: operations["deleteBuilding"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAdminAccountById"];
        put: operations["updateAdminAccount"];
        post?: never;
        delete: operations["deleteAdminAccount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/accounts/{id}/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["resetPassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/residents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 입주민이 주차장에 주차하러 차량 등록 */
        post: operations["registerResidentVehicle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/foreigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 외부 손님이 주차장에 주차하러 차량 등록 */
        post: operations["registerForeignVehicle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/userreg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그아웃
         * @description Token 제거합니다.
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile-images/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 프로필 이미지 등록/수정
         * @description 사용자가 자신의 프로필 사진을 업로드합니다.
         */
        post: operations["uploadProfileImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/opinions/reply/{opinionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpinionReply"];
        put?: never;
        post: operations["createOpinionReply"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/opinions/manager": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 동 대표 의견 목록 조회
         * @description 작성자의 권한이 매니저인 의견 목록 조회
         */
        get: operations["getManagerOpinion"];
        put?: never;
        /**
         * 동 대표 의견 생성
         * @description 권한이 매니저인 유저의 의견 생성
         */
        post: operations["addManagerOpinion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/myInfos/update-profile-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 프로필 이미지 업데이트
         * @description 사용자의 프로필 이미지를 업로드합니다.
         */
        post: operations["updateProfileImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/myInfos/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 비밀번호 변경
         * @description 사용자의 비밀번호를 변경합니다.
         */
        post: operations["changePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inspection/type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 점검 항목 내용들을 싹다 보여주기
         * @description 점검 항목들을 보여줍니다, 그리고 주호야 페이징 언제 만들꺼니
         */
        get: operations["showAllTypes"];
        put?: never;
        /**
         * 점검 항목을 추가합니다
         * @description 점검 항목을 추가합니다
         */
        post: operations["addNewType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inspection/manager/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 점검 일정에 대한 상세 내용을 봅니다
         * @description 해당 점검 일정에 대한 상세 내용을 볼 수 있음
         */
        get: operations["showInspection"];
        put?: never;
        /**
         * 점검 일정을 변경합니다
         * @description 점검 일정 내용을 변경합니다
         */
        post: operations["updateInspectionSchedule"];
        /**
         * 해당 점검 내용을 지우고 싶을때 사용합니다
         * @description 해당 점검 일정을 삭제합니다
         */
        delete: operations["deleteInspectionSchedule"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inspection/manager/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 점검 일정을 추가합니다, 점검 하는 사람은 로그인한 정보에서 뺴올 예정입니다
         * @description 점검 일정을 추가합니다, 시작 및 종료 시간, 점검 항목, 점검내용을 넣습니다
         */
        post: operations["createInspectionSchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inspection/manager/complete/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 점검 일정을 소화하고 완료 버튼을 누르면 해당 api가 쏴져서 DB에 저 일정은 완료되었다고 처리가 됩니다
         * @description 해당 점검의 결과가 CHECKED로 변합니다
         */
        post: operations["compeleteInspection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inspection/issue/{id}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 해당 이슈에 대한 내용을 수정 할 수 있음
         * @description 해당 이슈에 대한 수정 내용
         */
        post: operations["updateInspectionIssue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inspection/issue/{id}/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 해당 점검 사항에 문제가 생겼을 경우 이슈를 생성
         * @description 해당 점검에 대한 이슈 생성
         */
        post: operations["makeInspectionIssue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 유저 예약 조회
         * @description 유저가 예약한 공용시설 예약 목록 조회
         */
        get: operations["getMyReservations"];
        put?: never;
        /**
         * 유저 공용시설 예약하기
         * @description 유저가 등록된 공용시설을 예약하기
         */
        post: operations["reservationFacility"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/entry-records/request/{vehicleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 이미 등록한 차량이 다시 주차장에 들어가려 등록하는 동작 */
        post: operations["requestEntryRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/entry-records/exit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 주차장에서 차 빼서 나가는 동작 */
        post: operations["exit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/entry-records/enter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 차 몰고 주차장으로 들어가는 동작 */
        post: operations["enter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 민원 목록 조회
         * @description 로그인한 유저의 민원 목록을 조회
         */
        get: operations["getAllComplaint"];
        put?: never;
        /**
         * 민원 등록
         * @description 새로운 민원을 등록합니다
         */
        post: operations["createComplaint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaint-feedbacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 민원 피드백 생성
         * @description 민원에 대한 새로운 피드백을 저장합니다
         */
        post: operations["saveComplaintFeedback"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 커뮤니티 소통 게시판 글 목록 조회 */
        get: operations["list"];
        put?: never;
        /** 커뮤니티 소통 게시판에 글 등록 */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/{id}/pin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 글 고정시키기 */
        post: operations["pin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getChatroomList"];
        put?: never;
        post: operations["createChatroom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chats/{chatroomId}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["joinChatroom"];
        delete: operations["leaveChatroom"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chats/{chatroomId}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["markMessagesAsReadUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 인증번호 확인
         * @description 발송된 인증번호를 확인합니다.
         */
        post: operations["verifyCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/send-verification-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 인증번호 발송
         * @description 이메일로 인증번호를 발송합니다.
         */
        post: operations["sendVerificationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["resetPassword_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/find-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["findEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/check-phone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 휴대폰 번호 중복 확인
         * @description 휴대폰 번호의 중복 여부를 확인합니다.
         */
        post: operations["checkPhone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/check-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 이메일 중복 확인
         * @description 이메일 주소의 중복 여부를 확인합니다.
         */
        post: operations["checkEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 관리자 계정 등록
         * @description 새로운 관리자 계정을 등록합니다. (이메일, 사용자 이름, 비밀번호 필요)
         */
        post: operations["adminRegister"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/notices/media/images/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 공지사항 게시글 이미지 등록
         * @description 공지사항 에디터에 사용될 이미지를 업로드합니다.
         */
        post: operations["uploadImages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/notices/media/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 공지사항 게시글 파일 등록
         * @description 공지사항에 첨부할 파일을 업로드합니다.
         */
        post: operations["uploadFiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/notices/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 공지사항 게시글 등록
         * @description 게시글 작성사항: 제목, 내용, 파일
         */
        post: operations["createNotice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/menu/menus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllMenus"];
        put?: never;
        post: operations["createMenu"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/menu/grades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllGrades"];
        put?: never;
        post: operations["createGrade"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 관리자 로그인
         * @description 관리자 아이디(이메일)와 비밀번호로 로그인하고 JWT 토큰을 발급받습니다.
         */
        post: operations["adminLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 공용시설 목록 조회 [관리자] */
        get: operations["getFacilityList"];
        put?: never;
        /** 공용시설 등록 */
        post: operations["createFacility"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/{facilityId}/instructors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 강사 목록 조회 */
        get: operations["getInstructorList"];
        put?: never;
        /** 강사 등록 */
        post: operations["createInstructor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/{facilityId}/instructors/{instructorId}/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 강사 스케줄 목록 조회 */
        get: operations["getScheduleList"];
        put?: never;
        /** 강사 스케줄(타임슬롯) 등록 */
        post: operations["createSchedules"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/chats/{chatroomId}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["markMessagesAsRead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/chats/{chatroomId}/close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["closeChatroom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/chats/{chatroomId}/assign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["assignAdmin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/apartments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [관리자] 아파트 목록 조회 (페이징 및 검색)
         * @description 모든 아파트 목록을 페이징 처리하여 조회하고, 이름, 주소, 우편번호로 검색합니다.
         */
        get: operations["getAllApartments"];
        put?: never;
        /**
         * [관리자] 아파트 생성
         * @description 새로운 아파트를 생성합니다.
         */
        post: operations["createApartment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/apartments/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * [관리자] 호수 생성
         * @description 새로운 호수를 생성합니다.
         */
        post: operations["createUnit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/apartments/buildings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * [관리자] 동 생성
         * @description 새로운 동을 생성합니다.
         */
        post: operations["createBuilding"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllAdminAccounts"];
        put?: never;
        post: operations["createAdminAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/update/{vehicleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 등록된 차량을 수정 */
        patch: operations["updateVehicle"];
        trace?: never;
    };
    "/api/v1/opinions/{opinionId}/inactive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["inactiveComplaint"];
        trace?: never;
    };
    "/api/v1/myInfos/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 내 정보 수정
         * @description 사용자의 프로필 정보를 수정합니다. (이름, 주소, 전화번호 등. 이메일, 비밀번호 변경은 별도 API 사용)
         */
        patch: operations["updateMyInfo"];
        trace?: never;
    };
    "/api/v1/entry-records/{entryRecordId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 주차 요청 승인/미승인 결정하는 동작 */
        patch: operations["updateEntryStatus"];
        trace?: never;
    };
    "/api/v1/complaints/{complaintId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 민원 상태 변경
         * @description 민원의 상태(PENDING, IN_PROGRESS 등)를 변경합니다
         */
        patch: operations["updateComplaintStatus"];
        trace?: never;
    };
    "/api/v1/complaints/{complaintId}/inactive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["inactiveComplaint_1"];
        trace?: never;
    };
    "/api/v1/admin/users/{userId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateUserStatus"];
        trace?: never;
    };
    "/api/v1/admin/users/{userId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateUserRoles"];
        trace?: never;
    };
    "/api/v1/admin/facilities/reservations/{reservationId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 유저들의 예약 상태 변경
         * @description 유저들의 예약 상태 pending/agree/reject로 변경하기
         */
        patch: operations["updateReservationStatus"];
        trace?: never;
    };
    "/api/v1/admin/accounts/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["changeAccountStatus"];
        trace?: never;
    };
    "/api/v1/vehicles/visitors/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 주차 승인을 받지 못해 대기하고 있는 외부 차량 리스트 조회 */
        get: operations["getMyRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 주차랑 수용 공간과 현재 주차된 차량 수, 그리고 남은 주차 공간 */
        get: operations["getParkingStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/registrationsWithStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 등록된 모든 차량 조회 */
        get: operations["getRegistrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/mine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 입주민이 자신 앞으로 등록된 차량 리스트 조회 */
        get: operations["getMyVehicles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/invited-approved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 입주민의 허가는 받았지만 관리자의 최종 승인은 받지 못해 대기하는 외부 차량 리스트 조회 */
        get: operations["getInvitedApprovedVehicles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/approved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 주차 권한을 가진 차량들만 조회 */
        get: operations["getApprovedVehicles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 현재 주차 중인 차량 리스트 조회 */
        get: operations["getActiveVehicles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/ForeignsRegistrationsWithStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 24시간 이내 등록된  모든 외부인 차량 조회 */
        get: operations["getRegistrations_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/check-phonenum": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 휴대폰 번호 중복 확인
         * @description 휴대폰 번호 중복 여부를 확인합니다.
         */
        get: operations["checkPhoneNum"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/check-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 이메일 중복 확인
         * @description 이메일의 중복 여부를 확인합니다.
         */
        get: operations["checkEmail_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notices/user/{noticeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 공지사항 게시글 조회 [사용자]
         * @description 게시글 조회사항: 제목, 작성자, 작성일, 조회수, 내용, 파일
         */
        get: operations["readNoticeUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notices/user/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 권한/ 공지사항 게시글 목록 조회
         * @description 사용자 권한 - 전체공지와 사용자 동
         */
        get: operations["getUserNotices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/myInfos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 정보 조회
         * @description 사용자의 프로필 정보를 조회합니다.
         */
        get: operations["getMyInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inspection/manager": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 점검 일정을 가져옵니다
         * @description 점검 일정 목록을 가져옵니다
         */
        get: operations["showAllInspections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inspection/issue/show/{issueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 해당 이슈에 대한 내용을 볼 수 있음
         * @description 해당 이슈에 대한 내용
         */
        get: operations["getInspectionIssue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 공용시설 목록 조회
         * @description 등록된(활성화 중) 공용시설 목록 조희
         */
        get: operations["getFacilityList_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/{facilityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 공용시설 단건 조회 */
        get: operations["getFacility_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/{facilityId}/instructors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 시설별 강사 목록 조회 */
        get: operations["getInstructorList_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/{facilityId}/instructors/{instructorId}/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 강사별 캘린더 타임슬롯 조회 */
        get: operations["getInstructorTimeSlots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/facilities/reservations/{facilityReservationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyReservationDetail"];
        put?: never;
        post?: never;
        /**
         * 유저 예약 취소
         * @description 유저가 예약한 공용시설을 예약 취소하기
         */
        delete: operations["cancelReservation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/entry-records/{vehicleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 차량의 출입 기록들 최신순 조회 */
        get: operations["getRecords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaints/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 상태별 검색
         * @description 민원 상태 별 조회
         */
        get: operations["searchComplaintByStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaints/statistics/today": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 일별 민원 수 조회
         * @description 일별 민원 수, 상태 조회
         */
        get: operations["getTodayStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaints/statistics/today-rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 어제자 민원 수 조회
         * @description 어제자 민원 수를 조회
         */
        get: operations["getComplaintTodayRate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaints/statistics/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 상태별 처리수 조회
         * @description 상태별 처리수 조회
         */
        get: operations["getComplaintStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaints/statistics/handling-rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 민원 처리율 조회
         * @description 전체 민원 중 처리 완료된 민원의 비율을 반환
         */
        get: operations["getComplaintHandlingRate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaints/manager": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 모든 민원 목록 조회
         * @description 관리자 권한으로 전체 민원 목록을 조회
         */
        get: operations["getAllComplaintByManager"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/complaint-feedbacks/{complaintId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 민원에 대한 피드백 목록 조회
         * @description 해당 민원 ID로 모든 피드백을 조회합니다
         */
        get: operations["getComplaintFeedback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 특정 글에 달린 답글 목록 조회 */
        get: operations["listBranch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chats/{chatroomId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getChatroomById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chats/{chatroomId}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMessageList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chats/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyChatrooms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chats/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getChatroomsByFilter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/home": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["home"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/check-social-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["checkSocialSession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/apartments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 아파트 목록 조회 (검색)
         * @description 모든 아파트 목록을 조회하고, 이름, 주소, 우편번호로 검색합니다.
         */
        get: operations["getAllApartments_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/apartments/{apartmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 아파트 상세 조회
         * @description 특정 아파트 정보를 ID로 조회합니다.
         */
        get: operations["getApartmentById_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/apartments/{apartmentId}/buildings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 아파트의 동 목록 조회
         * @description 특정 아파트에 속한 모든 동 목록을 조회합니다.
         */
        get: operations["getBuildingsByApartment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/apartments/units/{unitId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 호수 상세 조회
         * @description 특정 호수 정보를 ID로 조회합니다.
         */
        get: operations["getUnitById_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/apartments/buildings/{buildingId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 동 상세 조회
         * @description 특정 동 정보를 ID로 조회합니다.
         */
        get: operations["getBuildingById_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/apartments/buildings/{buildingId}/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 동의 호수 목록 조회
         * @description 특정 동에 속한 모든 호수 목록을 조회합니다.
         */
        get: operations["getUnitsByBuilding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/users/{userId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/users/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["exportUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/notices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 매니저 권한/ 공지사항 게시글 목록 조회
         * @description 매니저 권한 - 전체
         */
        get: operations["getNoticeList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/notices/{noticeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 공지사항 게시글 조회
         * @description 게시글 조회사항: 제목, 작성자, 작성일, 조회수, 내용, 파일
         */
        get: operations["readNotice"];
        put?: never;
        post?: never;
        /**
         * 공지사항 게시글 삭제
         * @description 게시글 삭제(INACTIVE 상태)
         */
        delete: operations["deleteNotice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/notices/media/images/{noticeImageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 공지사항 게시글 이미지 정보 조회
         * @description 게시글에 첨부된 이미지를 ID로 조회합니다. S3 접근 URL, 원본 파일명, 임시 여부 등을 반환합니다.
         */
        get: operations["getImageInfo"];
        put?: never;
        post?: never;
        /**
         * 임시 이미지 삭제
         * @description 사용자가 업로드한 임시 이미지를 삭제합니다. S3와 DB 모두에서 제거
         */
        delete: operations["deleteImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/notices/media/files/{noticeFileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 공지사항 게시글 파일 정보 조회
         * @description 게시글에 첨부된 파일을 ID로 조회합니다. S3 접근 URL, 원본 파일명, 임시 여부 등을 반환합니다.
         */
        get: operations["getFileInfo"];
        put?: never;
        post?: never;
        /**
         * 임시 파일 삭제
         * @description 사용자가 업로드한 임시 파일을 삭제합니다. S3와 DB 모두에서 제거
         */
        delete: operations["deleteFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/menu/menus/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllMenusList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/menu/me/menus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyMenus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/menu/grades/{id}/menus/sorted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMenusWithSortOrderByGradeId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 관리자 정보 조회
         * @description 현재 로그인된 관리자의 프로필 정보를 조회합니다.
         */
        get: operations["me_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/{facilityId}/instructors/{instructorId}/schedules/timeslots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 스케쥴 타임슬롯 목록 조회 */
        get: operations["getTimeSlots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/statistics/user-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자별 이용 횟수 통계
         * @description 사용자 기준으로 이용 횟수를 집계하여 순위별로 제공합니다.
         */
        get: operations["getUserUsageCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/statistics/time-period": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시간대별 이용 통계
         * @description 시간대(오전/오후/저녁/야간) 기준으로 이용 건수를 분석합니다. 시간대 기준::: 오전: 05~12시, 오후: 12~17시, 저녁: 17~23시, 야간: 23~05시
         */
        get: operations["getTimePeriodCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/statistics/reservation-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 예약 상태별 현황
         * @description AGREE, REJECT, CANCEL, PENDING 상태별 예약 건수를 조회합니다.
         */
        get: operations["getReservationStatusCounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/statistics/facility-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시설별 이용 횟수 통계
         * @description 가장 많이 이용된 시설부터 순위대로 반환합니다.
         */
        get: operations["getFacilityUsageCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/statistics/day-of-week": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 요일별 이용 통계
         * @description 요일 기준으로 이용 건수를 분석합니다.
         */
        get: operations["getDayOfWeekCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/statistics/cancellation-ratio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 예약 취소율
         * @description status=CANCEL / 전체 예약 (%)
         */
        get: operations["getCancellationRatio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/statistics/building-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 동별 이용 횟수 통계
         * @description 동(건물번호) 기준으로 이용 횟수를 집계하여 제공합니다.
         */
        get: operations["getBuildingUsageCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 유저들의 예약 목록 조회 */
        get: operations["getReservationsByApartment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/reservations/{reservationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 유저들의 예약 상세 조회 */
        get: operations["getReservationDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 관리자 상태 확인
         * @description 현재 인증된 관리자의 상태 또는 특정 정보를 확인합니다.
         */
        get: operations["adminCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/chats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAdminChatroomList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/chats/{chatroomId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAdminChatroomById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/chats/{chatroomId}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAdminChatMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/chat/apartments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApartments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/chat-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getChatCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/apartments/{apartmentId}/buildings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [관리자] 특정 아파트의 동 목록 조회 (페이징)
         * @description 특정 아파트에 속한 모든 동 목록을 페이징 처리하여 조회합니다.
         */
        get: operations["getBuildingsByApartment_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/apartments/buildings/{buildingId}/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [관리자] 특정 동의 호수 목록 조회 (페이징)
         * @description 특정 동에 속한 모든 호수 목록을 페이징 처리하여 조회합니다.
         */
        get: operations["getUnitsByBuilding_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/accounts/page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAdminAccountsByPage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/accounts/grades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAdminGrades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/accounts/apartments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllApartments_2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/accounts/apartments/{apartmentId}/buildings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getBuildingsByApartmentId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicles/delete/{vehicleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 등록된 차량을 삭제 */
        delete: operations["deleteVehicle"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 회원 탈퇴
         * @description 로그인된 사용자가 본인의 계정을 탈퇴합니다.
         */
        delete: operations["withdrawUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile-images/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 프로필 이미지 삭제
         * @description 사용자의 프로필 이미지를 삭제합니다.
         */
        delete: operations["deleteProfileImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/delete/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 해당 입주민이 작성한 글 삭제 */
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["logout_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 관리자 로그아웃
         * @description 관리자 계정의 로그아웃을 처리하고 토큰을 무효화합니다.
         */
        delete: operations["adminLogout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/{facilityId}/instructors/{instructorId}/schedules/{scheduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 공용시설 강사 스케줄 삭제 (한 건씩 삭제) */
        delete: operations["deleteSchedule"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/facilities/{facilityId}/instructors/{instructorId}/schedules/timeslots/{timeSlotId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 스케쥴 타임슬롯 단건 삭제 */
        delete: operations["deleteTimeSlot"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UpdateOpinionReplyRequestDto: {
            reply?: string;
        };
        CreateComplaintRequestDto: {
            title?: string;
            content?: string;
            category?: string;
        };
        UpdateComplaintFeedbackRequestDto: {
            content?: string;
        };
        CommunityRequestDto: {
            content?: string;
            /** Format: int64 */
            parentId?: number;
        };
        CommunityResponseDto: {
            /** Format: int64 */
            id?: number;
            content?: string;
            author?: components["schemas"]["UserBasicDto"];
            /** Format: int64 */
            parentId?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            status?: string;
            pinned?: boolean;
        };
        UserBasicDto: {
            /** Format: int64 */
            id?: number;
            username?: string;
        };
        /** @description 공지사항 게시글 수정 요청 DTO */
        NoticeUpdateRequestDto: {
            /**
             * @description 게시글 제목
             * @example 엘레베이터 정기점검 안내
             */
            title?: string;
            /**
             * @description 게시글 내용
             * @example 점검일시: 2025년 5월 15일 14시 ~ 16시
             */
            content?: string;
            /**
             * @description tiptap에 삽입된 이미지 ID들
             * @example []
             */
            imageIds?: number[];
            /**
             * @description tiptap에 삽입된 첨부파일 ID들
             * @example []
             */
            fileIds?: number[];
        };
        MenuDTO: {
            /** Format: int64 */
            id?: number;
            name?: string;
            url?: string;
            description?: string;
            icon?: string;
            /** Format: int32 */
            sortOrder?: number;
        };
        ApiResponseMenuDTO: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["MenuDTO"];
        };
        AdminGradeDTO: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            level: number;
            name?: string;
            description?: string;
            /** Format: int64 */
            usersCount?: number;
            menuIds?: number[];
            menuSortOrders?: {
                [key: string]: number;
            };
        };
        ApiResponseAdminGradeDTO: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["AdminGradeDTO"];
        };
        ApiResponseVoid: {
            success?: boolean;
            message?: string;
            data?: Record<string, never>;
        };
        /** @description 공용시설 수정 요청 DTO */
        FacilityUpdateRequestDto: {
            /**
             * @description 공용시설 이름
             * @example 헬스장
             */
            name?: string;
            /**
             * @description 공용시설 설명
             * @example 강습도 가능한 아주 좋은 피트니스 센터
             */
            description?: string;
            /**
             * @description 공용시설 운영 시작 시간
             * @example 06:00
             */
            openTime?: string;
            /**
             * @description 공용시설 운영 종료 시간
             * @example 23:00
             */
            closeTime?: string;
        };
        /** @description 공용시설 강사 수정 요청 DTO */
        InstructorUpdateRequestDto: {
            /**
             * @description 강사 이름
             * @example 박태환
             */
            name?: string;
            /**
             * @description 강사 소개/설명
             * @example 올림픽 메달리스트의 차원이 다른 수영 강습을 받아보세요
             */
            description?: string;
        };
        /** @description 아파트 생성/수정 요청 DTO */
        ApartmentRequestDto: {
            /**
             * @description 아파트 이름
             * @example 현대아파트
             */
            name?: string;
            /**
             * @description 아파트 주소
             * @example 서울특별시 강남구 역삼동 123
             */
            address?: string;
            /**
             * @description 우편번호
             * @example 12345
             */
            zipcode?: string;
        };
        /** @description 아파트 정보 응답 DTO */
        ApartmentResponseDto: {
            /**
             * Format: int64
             * @description 아파트 ID
             * @example 1
             */
            id?: number;
            /**
             * @description 아파트 이름
             * @example 현대아파트
             */
            name?: string;
            /**
             * @description 아파트 주소
             * @example 서울특별시 강남구 역삼동 123
             */
            address?: string;
            /**
             * @description 우편번호
             * @example 12345
             */
            zipcode?: string;
        };
        /** @description 호수 생성/수정 요청 DTO */
        UnitRequestDto: {
            /**
             * Format: int64
             * @description 건물 ID
             * @example 1
             */
            buildingId: number;
            /**
             * @description 호수
             * @example 101호
             */
            unitNumber?: string;
        };
        /** @description 호수 정보 응답 DTO */
        UnitResponseDto: {
            /**
             * Format: int64
             * @description 호수 ID
             * @example 1
             */
            id?: number;
            /**
             * @description 호수
             * @example 101호
             */
            unitNumber?: string;
            /**
             * Format: int64
             * @description 건물 ID
             * @example 1
             */
            buildingId?: number;
        };
        /** @description 건물(동) 생성/수정 요청 DTO */
        BuildingRequestDto: {
            /**
             * Format: int64
             * @description 아파트 ID
             * @example 1
             */
            apartmentId: number;
            /**
             * @description 건물 번호(동)
             * @example 101동
             */
            buildingNumber?: string;
        };
        /** @description 건물(동) 정보 응답 DTO */
        BuildingResponseDto: {
            /**
             * Format: int64
             * @description 건물 ID
             * @example 1
             */
            id?: number;
            /**
             * @description 건물 번호(동)
             * @example 101동
             */
            buildingNumber?: string;
            /**
             * Format: int64
             * @description 아파트 ID
             * @example 1
             */
            apartmentId?: number;
        };
        AdminAccountRequest: {
            name?: string;
            email?: string;
            role?: string;
            /** Format: int64 */
            apartmentId?: number;
            /** Format: int64 */
            buildingId?: number;
            password?: string;
            /** Format: int64 */
            gradeId?: number;
            active?: boolean;
        };
        AdminAccountResponse: {
            /** Format: int64 */
            id?: number;
            name?: string;
            email?: string;
            role?: string;
            /** Format: int64 */
            apartmentId?: number;
            apartmentName?: string;
            /** Format: int64 */
            buildingId?: number;
            buildingNumber?: string;
            /** Format: date-time */
            lastLogin?: string;
            status?: string;
            /** Format: int64 */
            gradeId?: number;
            gradeName?: string;
            /** Format: int32 */
            gradeLevel?: number;
        };
        PasswordChangeRequest: {
            password?: string;
            confirmPassword?: string;
        };
        ResidentVehicleRequestDto: {
            vehicleNum?: string;
            type?: string;
        };
        VehicleResponseDto: {
            vehicleNum?: string;
            type?: string;
            userPhone?: string;
            buildingName?: string;
            unitName?: string;
            reason?: string;
        };
        ForeignVehicleRequestDto: {
            vehicleNum?: string;
            type?: string;
            phone?: string;
            reason?: string;
            apartmentName?: string;
            buildingNum?: string;
            unitNum?: string;
        };
        /** @description 회원가입 시 입력하는 사용자 정보 DTO */
        UserRegistRequestDTO: {
            /**
             * @description 사용자 이메일
             * @example user@example.com
             */
            email?: string;
            /**
             * @description 비밀번호 (8자 이상, 영문자, 숫자, 특수문자 포함)
             * @example password123!
             */
            password?: string;
            /**
             * @description 사용자 이름
             * @example 홍길동
             */
            userName?: string;
            /**
             * Format: int64
             * @description 아파트 ID
             * @example 1
             */
            apartmentId: number;
            /**
             * Format: int64
             * @description 동 ID
             * @example 1
             */
            buildingId: number;
            /**
             * Format: int64
             * @description 호 ID
             * @example 1
             */
            unitId: number;
            /**
             * @description 휴대폰 번호
             * @example 01012345678
             */
            phoneNum?: string;
            /**
             * @description 소셜 로그인 제공자
             * @example kakao
             */
            socialProvider?: string;
            /**
             * @description 소셜 로그인 아이디
             * @example 1234567890
             */
            socialId?: string;
            /**
             * @description 프로필 이미지
             * @example https://example.com/profile.jpg
             */
            profileImage?: string;
        };
        CreateOpinionReplyRequestDto: {
            reply?: string;
        };
        CreateManagerOpinionRequestDto: {
            title?: string;
            content?: string;
        };
        /** @description 비밀번호 재설정 요청 DTO */
        ResetPasswordRequest: {
            /**
             * @description 현재 비밀번호
             * @example currentPassword123!
             */
            currentPassword?: string;
            /**
             * @description 새 비밀번호 (8자 이상, 영문자, 숫자, 특수문자 포함)
             * @example newPassword123!
             */
            newPassword?: string;
            /**
             * @description 새 비밀번호 확인
             * @example newPassword123!
             */
            newPasswordConfirm?: string;
        };
        /** @description 점검 분류를 지정해서 추가/수정을 위한 DTO */
        InspectionTypeDto: {
            /**
             * @description 추가/수정할 점검 분류
             * @example 차량
             */
            name?: string;
        };
        InspectionType: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            typeName?: string;
        };
        /** @description 점검 항목을 업데이트 위한 DTO */
        InspectionUpdateDto: {
            /**
             * Format: date-time
             * @description 시작 시간
             * @example 2025-05-25T00:00
             */
            startAt?: string;
            /**
             * Format: date-time
             * @description 종료 시간
             * @example 2025-05-26T00:00
             */
            finishAt?: string;
            /**
             * @description 점검 제목
             * @example 아이스크림 스타스크림
             */
            title?: string;
            /**
             * @description 점검 상세 내용
             * @example ルビィちゃん！[「はーい！」] 何が好き？
             *     루비쨩 나니가 스키
             *     루비쨩! 어떤 게 좋아?
             *
             *     チョコミント　よりも　あ･な･た･♡
             *     쵸코민토 요리모 아나타
             *     민트초코보다도 바･로･너･♡
             *
             *     歩夢ちゃん！[「はーい！」] 何が好き？
             *     아유무쨩 나니가 스키
             *     아유무쨩! 어떤 게 좋아?
             *
             *     ストロベリーフレイバー　よりも　あ･な･た･♡
             *     스토로베리이 후레이바아 요리모 아나타
             *     딸기 맛보다도 바･로･너･♡
             *
             *     四季ちゃん！[「はーい！」] 何が好き？
             *     시키쨩 나니가 스키
             *     시키쨩! 어떤 게 좋아?
             *
             *     クッキー＆クリーム　よりも　あ･な･た･♡
             *     쿳키이 안도 크리이무 요리모 아나타
             *     쿠키 앤 크림보다도 바･로･너･♡
             *
             *     みんな[「はーい！」] 何が好き？
             *     민나 나니가 스키
             *     얘들아, 어떤 게 좋아?
             *
             *     モチロン大好き　AiScReam
             *     모치론 다이스키 AiScReam
             *     당연히 제일 좋아하는 건 AiScReam
             */
            detail?: string;
            /**
             * @description 점검 분류
             * @example 소방
             */
            type?: string;
            /**
             * @description 점검 결과
             * @example CHECKED
             */
            result?: string;
        };
        /** @description 점검 일정에 대한 정보가 들어있는 DTO */
        InspectionRequestDto: {
            /**
             * Format: date-time
             * @description 시작 시간
             * @example 2025-05-12T00:00
             */
            startAt?: string;
            /**
             * Format: date-time
             * @description 종료 시간
             * @example 2025-11-21T00:00
             */
            finishAt?: string;
            /**
             * @description 점검 제목
             * @example 명장면 다시보기
             */
            title?: string;
            /**
             * @description 점검 상세 내용
             * @example 근데 드레이븐🎅이 문제에요 이 와중에 진짜 예 타워🏦 안쪽 그래도 잭키러브🎅가 문제에요 케넨🌩없을때 그래도 이쪽도⏩⏩ 달려들어야되는거아닌가요 재키러브🎅가문제에요 예 스턴걸고 쫓아가자 재키러브🎅가 아아악😱😱 잭키러브🎅🎅가 문제에요 돈도왕창떨어졌고요💵💵💵💵 재키러브 어떡하나요😱😱😱😱 저 재키러브를 또 더블킬 케넨🌩이없어요🙅🙅 재키러브가 퍽퍽🤜🤜 케넨🌩🌩이 없어요 기다려라 근데 이겼어요 좀 그만죽여 나도좀 죽이자😈😈 더샤이 오고있습니다 트리플킬 그리고 밀면되나요 왜이렇게빨리끝내나요 아이지❓❓😰😰😰😢😢😢이거 16분대 16분되기전에 이건아이지 이건 역대급인데요 와 아니 16분이 안됩니다 와 15분 50초 아이지 야 빨리 끝내자 기록🌟🌟이라도 세우자 끝났습니다 15분 55초 56초 쥐쥐
             */
            detail?: string;
            /**
             * @description 점검 분류
             * @example 소방
             */
            type?: string;
        };
        Apartment: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            name?: string;
            address?: string;
            zipcode?: string;
        };
        Building: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            apartment?: components["schemas"]["Apartment"];
            buildingNumber?: string;
        };
        Image: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            user?: components["schemas"]["User"];
            filePath?: string;
            tempId?: string;
            isTemp?: boolean;
            isDeleted?: boolean;
            originalName?: string;
            storedName?: string;
            path?: string;
            /** Format: int64 */
            size?: number;
            contentType?: string;
            isTemporary?: boolean;
            /** Format: date-time */
            expiresAt?: string;
            s3Key?: string;
        };
        Inspection: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            user?: components["schemas"]["User"];
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            finishAt?: string;
            type?: components["schemas"]["InspectionType"];
            title?: string;
            detail?: string;
            /** @enum {string} */
            result?: "CHECKED" | "PENDING" | "NOTYET" | "ISSUE";
            /**
             * @description 상태
             * @enum {string}
             */
            status?: "active" | "inactive" | "pending" | "withdrawn";
        };
        Unit: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            building?: components["schemas"]["Building"];
            unitNumber?: string;
        };
        User: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            apartment?: components["schemas"]["Apartment"];
            building?: components["schemas"]["Building"];
            unit?: components["schemas"]["Unit"];
            /** Format: int64 */
            gradeId?: number;
            socialProvider?: string;
            socialId?: string;
            roles?: ("ADMIN" | "USER" | "MODERATOR" | "MANAGER")[];
            password?: string;
            email?: string;
            phoneNum?: string;
            userName?: string;
            /**
             * @description 상태
             * @enum {string}
             */
            status?: "active" | "inactive" | "pending" | "withdrawn";
            refreshToken?: string;
            leaveReason?: string;
            /** Format: date-time */
            lastLoginAt?: string;
            /** Format: date-time */
            deletedAt?: string;
            profileImage?: components["schemas"]["Image"];
            profileImageSafely?: components["schemas"]["Image"];
        };
        /** @description 이슈 등록/수정 요청 DTO */
        InspectionIssueDto: {
            /**
             * @description 넣을 이슈 내용
             * @example 어어어어! / 어어어 들어가면 큰 일 나죠, 이거는!
             *     아아아아아! / 들어갔어요, 들어갔어요!
             *     으아아아아! / 자, 스파이더 마인 심어놓고
             *     야아아아 박정욱! / 야, 이거 큰일 났습니다, 큰일 났습니다.
             *     아아아아아! / 거기서 탱크 잃으면 큰일이에요!
             *     망했어요~ / 탱크 한 개 깨졌고!
             *     망했어요... 아~ / 벌쳐가 들어가면 무방비상태!
             *     망했어요, 아~ / 자, 여기 마인 심어놓고 쭉 들어갑니다, 임요환!
             *     박정욱~ 박정욱~ / 레이스밖에 막을 수 있는 방법이 없어요, 레이스밖에 없어요!
             *     망했어요, 이 게임 / 아, 박정욱!
             *     아~ 피해가 너무 크다아아아아앜! / 으아아아아아아아!
             */
            description?: string;
        };
        /** @description 공용시설 예약 요청 DTO */
        FacilityReservationRequestDto: {
            /**
             * Format: int64
             * @description 타임슬롯 ID
             * @example 1001
             */
            timeSlotId?: number;
            /**
             * @description 사용자 요청사항
             * @example (선택) 요청사항 입력
             */
            requestMessage?: string;
        };
        EntryRecordResponseDto: {
            /** Format: int64 */
            vehicleId?: number;
            /** Format: date-time */
            entryTime?: string;
            /** Format: date-time */
            exitTime?: string;
            /** @enum {string} */
            status?: "AGREE" | "INAGREE" | "PENDING" | "INVITER_AGREE";
        };
        EntryRecordRequestDto: {
            phone?: string;
        };
        CreateComplaintFeedbackRequestDto: {
            /** Format: int64 */
            complaintId?: number;
            content?: string;
        };
        ApiResponseChatroomDto: {
            /** Format: int32 */
            status?: number;
            success?: boolean;
            message?: string;
            data?: components["schemas"]["ChatroomDto"];
        };
        ChatroomDto: {
            /** Format: int64 */
            id?: number;
            title?: string;
            categoryCode?: string;
            /** Format: int64 */
            apartmentId?: number;
            hasNewMessage?: boolean;
            /** Format: int32 */
            userCount?: number;
            /** Format: date-time */
            createdAt?: string;
            status?: string;
        };
        ApiResponseBoolean: {
            /** Format: int32 */
            status?: number;
            success?: boolean;
            message?: string;
            data?: boolean;
        };
        /** @description 인증번호 확인 요청 DTO */
        VerifyCodeRequestDto: {
            /**
             * @description 인증번호를 확인할 이메일 주소
             * @example user@example.com
             */
            email?: string;
            /**
             * @description 확인할 인증번호
             * @example 123456
             */
            code?: string;
        };
        /** @description 인증번호 확인 응답 DTO */
        VerifyCodeResponseDto: {
            /**
             * @description 인증번호 확인 결과 메시지
             * @example 인증이 완료되었습니다.
             */
            message?: string;
            /**
             * @description 인증번호 확인 성공 여부
             * @example true
             */
            verified?: boolean;
        };
        /** @description 인증번호 발송 요청 DTO */
        VerificationCodeRequestDto: {
            /**
             * @description 인증번호를 발송할 이메일 주소
             * @example user@example.com
             */
            email?: string;
        };
        /** @description 인증번호 발송 응답 DTO */
        VerificationCodeResponseDto: {
            /**
             * @description 인증번호 발송 결과 메시지
             * @example 인증번호가 발송되었습니다. 이메일을 확인해주세요.
             */
            message?: string;
            /**
             * @description 인증번호 발송 성공 여부
             * @example true
             */
            success?: boolean;
        };
        /** @description 비밀번호 재설정 요청 DTO2 */
        PasswordResetRequestDTO: {
            /**
             * @description 사용자 이메일
             * @example user@example.com
             */
            email?: string;
            /**
             * @description 이메일 인증번호
             * @example 123456
             */
            verificationCode?: string;
            /**
             * @description 새 비밀번호
             * @example newPassword123!
             */
            password?: string;
            /**
             * @description 새 비밀번호 확인
             * @example newPassword123!
             */
            confirmPassword?: string;
        };
        LoginRequestDto: {
            email?: string;
            password?: string;
        };
        FindEmailRequest: {
            userName?: string;
            phoneNum?: string;
        };
        /** @description 휴대폰 번호 중복 확인 요청 DTO */
        PhoneCheckRequestDto: {
            /**
             * @description 확인할 휴대폰 번호
             * @example 01012345678
             */
            phoneNumber?: string;
        };
        /** @description 휴대폰 번호 중복 확인 응답 DTO */
        PhoneCheckResponseDto: {
            /**
             * @description 휴대폰 번호 중복 확인 결과 메시지
             * @example 사용 가능한 휴대폰 번호입니다.
             */
            message?: string;
            /**
             * @description 휴대폰 번호 사용 가능 여부
             * @example true
             */
            available?: boolean;
        };
        /** @description 이메일 중복 확인 요청 DTO */
        EmailCheckRequestDto: {
            /**
             * @description 확인할 이메일 주소
             * @example user@example.com
             */
            email?: string;
        };
        /** @description 이메일 중복 확인 응답 DTO */
        EmailCheckResponseDto: {
            /**
             * @description 이메일 중복 확인 결과 메시지
             * @example 사용 가능한 이메일입니다.
             */
            message?: string;
            /**
             * @description 이메일 사용 가능 여부
             * @example true
             */
            available?: boolean;
        };
        /** @description 관리자 등록 요청 DTO */
        AdminRegistrationRequest: {
            /**
             * @description 관리자 아이디
             * @example newadmin
             */
            username?: string;
            /**
             * @description 관리자 비밀번호
             * @example newpassword123
             */
            password?: string;
            /**
             * @description 관리자 이메일
             * @example admin@example.com
             */
            email?: string;
        };
        /** @description 공지사항 게시글 첨부파일 업로드 응답 DTO */
        MediaUploadResponseDto: {
            /**
             * Format: int64
             * @description 첨부파일/이미지 ID
             * @example 23
             */
            id?: number;
            /**
             * @description S3 업로드 URL 또는 접근 URL
             * @example https://bucket.s3.ap-northeast-2.amazonaws.com/notice/1/images/abcd.png
             */
            url?: string;
            /**
             * @description 원본 파일명
             * @example 사진1.png
             */
            originalName?: string;
        };
        /** @description 공지사항 게시글 등록 요청 DTO */
        NoticeCreateRequestDto: {
            /**
             * @description 게시글 제목
             * @example 엘레베이터 정기점검 안내
             */
            title?: string;
            /**
             * @description 게시글 내용
             * @example 점검일시: 2025년 5월 15일 14시 ~ 16시
             */
            content?: string;
            /**
             * Format: int64
             * @description 게시글 대상: 전체/동별 선택 - buildingId
             * @example 101동 / null일 경우 전체 공지
             */
            buildingId?: number;
            /**
             * @description tiptap에 삽입된 이미지 ID들
             * @example []
             */
            imageIds?: number[];
            /**
             * @description tiptap에 삽입된 첨부파일 ID들
             * @example []
             */
            fileIds?: number[];
        };
        /** @description 관리자 로그인 요청 DTO */
        AdminLoginRequest: {
            /**
             * @description 관리자 아이디
             * @example admin
             */
            username?: string;
            /**
             * @description 관리자 비밀번호
             * @example password123
             */
            password?: string;
        };
        /** @description 공용시설 등록 요청 DTO */
        FacilityCreateRequestDto: {
            /**
             * @description 등록할 공용시설 이름
             * @example 수영장
             */
            name: string;
            /**
             * @description 공용시설 설명
             * @example 반드시 수영모를 씁시다
             */
            description: string;
            /**
             * @description 공용시설 운영 시작 시간
             * @example 06:00
             */
            openTime: string;
            /**
             * @description 공용시설 운영 종료 시간
             * @example 22:00
             */
            closeTime: string;
        };
        /** @description 공용시설 강사 등록 요청 DTO */
        InstructorCreateRequestDto: {
            /**
             * @description 강사 이름
             * @example 박태환
             */
            name?: string;
            /**
             * @description 강사 소개/설명
             * @example 올림픽 메달리스트의 차원이 다른 수영 강습을 받아보세요
             */
            description?: string;
        };
        /** @description 공용시설 강사 일정 등록 요청 DTO */
        InstructorScheduleCreateRequestDto: {
            /**
             * @description 프로그램명
             * @example 초보반
             */
            scheduleName?: string;
            /**
             * @description 근무 요일
             * @example TUESDAY
             */
            dayOfWeek?: string;
            /**
             * @description 근무 시작 시간
             * @example 15:00
             */
            startTime?: string;
            /**
             * @description 근무 종료 시간
             * @example 18:00
             */
            endTime?: string;
            /**
             * Format: int64
             * @description 예약 단위(분)
             * @example 60
             */
            slotMinutes?: number;
            /**
             * Format: int64
             * @description 한 슬롯(타임)당 최대 수용 가능 인원
             * @example 20
             */
            capacity?: number;
            /**
             * Format: date
             * @description 적용 시작일
             * @example 2025-06-01
             */
            periodStart?: string;
            /**
             * Format: date
             * @description 적용 종료일
             * @example 2025-06-30
             */
            periodEnd?: string;
        };
        VehicleUpdateRequestDto: {
            vehicleNum?: string;
            type?: string;
        };
        /** @description 사용자 정보 요청 DTO */
        MyInfoUpdateRequestDto: {
            /**
             * @description 수정할 이름
             * @example 홍길동
             */
            userName?: string;
            /**
             * @description 수정할 전화번호
             * @example 01012345678
             */
            phoneNum?: string;
            /**
             * @description 사용자 이메일
             * @example test@example.com
             */
            email?: string;
            /**
             * Format: int64
             * @description 아파트 ID
             * @example 1
             */
            apartmentId?: number;
            /**
             * Format: int64
             * @description 동 ID
             * @example 1
             */
            buildingId?: number;
            /**
             * Format: int64
             * @description 호수 ID
             * @example 1
             */
            unitId?: number;
        };
        EntryRecordStatusUpdateRequestDto: {
            /** @enum {string} */
            status?: "AGREE" | "INAGREE" | "PENDING" | "INVITER_AGREE";
        };
        EntryRecordStatusDto: {
            /** Format: int64 */
            id?: number;
            status?: string;
        };
        AdminUserStatusUpdateRequest: {
            /**
             * @description 상태
             * @enum {string}
             */
            status: "active" | "inactive" | "pending" | "withdrawn";
        };
        AdminUserRoleUpdateRequest: {
            roles?: ("ADMIN" | "USER" | "MODERATOR" | "MANAGER")[];
        };
        /** @description 공용시설 예약 상태 변경 요청 DTO */
        FacilityReservationStatusUpdateDto: {
            /**
             * @description 예약 상태
             * @example PENDING
             * @enum {string}
             */
            status?: "AGREE" | "PENDING" | "REJECT" | "CANCEL";
        };
        VehicleRegistrationInfoDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            entryRecordId?: number;
            registerType?: string;
            applicantName?: string;
            apartmentName?: string;
            buildingName?: string;
            unitName?: string;
            vehicleNum?: string;
            type?: string;
            phone?: string;
            /** Format: date-time */
            createdAt?: string;
            reason?: string;
            userPhone?: string;
            status?: string;
            vehicleStatus?: string;
        };
        ParkingStatusDto: {
            /** Format: int32 */
            totalCapacity?: number;
            /** Format: int64 */
            activeCount?: number;
            /** Format: int32 */
            remainingSpace?: number;
        };
        NoticeFileDto: {
            /** Format: int64 */
            id?: number;
            originalName?: string;
            downloadUrl?: string;
            /** Format: int64 */
            size?: number;
        };
        NoticeImageDto: {
            /** Format: int64 */
            id?: number;
            originalName?: string;
            downloadUrl?: string;
            /** Format: int64 */
            size?: number;
        };
        /** @description 공지사항 게시글 조회 응답 DTO */
        NoticeReadResponseDto: {
            /**
             * Format: int64
             * @description 게시글 번호
             * @example 1
             */
            noticeId?: number;
            /**
             * @description 게시글 제목
             * @example 엘레베이터 정기점검 안내
             */
            title?: string;
            /**
             * @description 게시글 내용
             * @example 점검일시: 2025년 5월 15일 14시 ~ 16시
             */
            content?: string;
            /**
             * @description 게시글 작성자
             * @example 관리사무소
             */
            authorName?: string;
            /**
             * Format: date-time
             * @description 게시글 작성일
             * @example 2025-05-15 09:00
             */
            createdAt?: string;
            /**
             * Format: int64
             * @description 게시글 조회수
             * @example 0
             */
            viewCount?: number;
            /**
             * @description 게시글 첨부 이미지
             * @example 엘레베이터.jpg
             */
            imageUrls?: components["schemas"]["NoticeImageDto"][];
            /**
             * @description 게시글 첨부 파일
             * @example 엘레베이터_점검_안내문.pdf
             */
            fileUrls?: components["schemas"]["NoticeFileDto"][];
        };
        PageUserNoticeSummaryResponseDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["UserNoticeSummaryResponseDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            unpaged?: boolean;
            paged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
        };
        SortObject: {
            empty?: boolean;
            unsorted?: boolean;
            sorted?: boolean;
        };
        /** @description 매니저 권한 - 공지사항 게시글 목록 조회 응답 DTO */
        UserNoticeSummaryResponseDto: {
            /**
             * Format: int64
             * @description 게시글 번호
             * @example 1
             */
            noticeId?: number;
            /**
             * @description 게시글 제목
             * @example 엘레베이터 정기점검 안내
             */
            title?: string;
            /**
             * @description 게시글 작성자
             * @example 관리사무소
             */
            authorName?: string;
            /**
             * Format: date-time
             * @description 게시글 작성일
             * @example 2025-05-15 09:00
             */
            createdAt?: string;
            /**
             * Format: int64
             * @description 게시글 조회수
             * @example 0
             */
            viewCount?: number;
        };
        /** @description 사용자 정보 응답 DTO */
        MyInfoResponseDto: {
            /**
             * Format: int64
             * @description 사용자 ID
             * @example 1
             */
            id?: number;
            /**
             * @description 계정 이메일
             * @example lion@gmail.com
             */
            email?: string;
            /**
             * @description 사용자 이름
             * @example 홍길동
             */
            userName?: string;
            /**
             * @description 사용자 전화번호
             * @example 010-1234-5678
             */
            phoneNum?: string;
            /**
             * Format: date-time
             * @description 계정 생성 시각
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description 계정 수정 시각
             */
            modifiedAt?: string;
            /** @description 프로필 이미지 url */
            profileImageUrl?: string;
            /**
             * @description 아파트 이름
             * @example 행복 아파트
             */
            apartmentName?: string;
            /**
             * @description 아파트 동
             * @example 101동
             */
            buildingName?: string;
            /**
             * @description 아파트 호수
             * @example 1004호
             */
            unitNumber?: string;
            /**
             * @description 소셜 로그인 제공자
             * @example Google
             */
            socialProvider?: string;
            /**
             * @description 아파트 우편번호
             * @example 12345
             */
            zipcode?: string;
            /**
             * @description 아파트 주소
             * @example 서울시 강남구 테헤란로 123
             */
            address?: string;
        };
        InspectionResponseDetailDto: {
            /** Format: int64 */
            inspectionId?: number;
            /** Format: int64 */
            userId?: number;
            userName?: string;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            finishAt?: string;
            title?: string;
            detail?: string;
            /** @enum {string} */
            result?: "CHECKED" | "PENDING" | "NOTYET" | "ISSUE";
            typeName?: string;
        };
        IssueResponseDetailDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            inspectionId?: number;
            /** Format: int64 */
            userId?: number;
            userName?: string;
            title?: string;
            description?: string;
            typeName?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        /** @description 공용시설 목록 조회 [관리자] 응답 DTO */
        FacilitySimpleResponseDto: {
            /**
             * Format: int64
             * @description 공용시설 id
             * @example 1
             */
            facilityId?: number;
            /**
             * @description 공용시설 이름
             * @example 수영장
             */
            facilityName?: string;
            /**
             * @description 공용시설 설명
             * @example 반드시 수영모를 씁시다
             */
            description?: string;
            /**
             * @description 공용시설 운영 시작 시간
             * @example 06:00
             */
            openTime?: string;
            /**
             * @description 공용시설 운영 종료 시간
             * @example 22:00
             */
            closeTime?: string;
        };
        /** @description 공용시설 강사 목록 조회 응답 DTO */
        InstructorSimpleResponseDto: {
            /**
             * Format: int64
             * @description 강사 ID
             * @example 1
             */
            instructorId?: number;
            /**
             * @description 강사 이름
             * @example 박태환
             */
            name?: string;
            /**
             * @description 강사 소개/설명
             * @example 올림픽 메달리스트의 차원이 다른 수영 강습을 받아보세요
             */
            description?: string;
        };
        /** @description 타임슬롯 조회 응답 DTO */
        TimeSlotSimpleResponseDto: {
            /**
             * Format: int64
             * @description 타임슬롯 ID
             * @example 123
             */
            timeSlotId?: number;
            /**
             * @description 프로그램명
             * @example 초보반
             */
            scheduleName?: string;
            /**
             * Format: date
             * @description 날짜
             * @example 2025-06-10
             */
            date?: string;
            /**
             * @description 시작 시간
             * @example 10:00
             */
            startTime?: string;
            /**
             * @description 종료 시간
             * @example 11:00
             */
            endTime?: string;
            /**
             * Format: int64
             * @description 최대 예약 가능 인원
             * @example 10
             */
            maxCapacity?: number;
            /**
             * Format: int64
             * @description 현재 예약 인원
             * @example 4
             */
            reservedCount?: number;
            /**
             * @description 마감 여부
             * @example false
             */
            isFull?: boolean;
        };
        /** @description 공용시설 예약 목록 조회 [사용자] 응답 DTO */
        FacilityReservationSimpleUserDto: {
            /**
             * Format: int64
             * @description 예약 ID
             * @example 1
             */
            reservationId?: number;
            /**
             * @description 예약한 공용시설 이름
             * @example 수영장
             */
            facilityName?: string;
            /**
             * @description 예약한 공용시설 강사 이름
             * @example 박태환
             */
            instructorName?: string;
            /**
             * @description 예약한 공용시설 프로그램 이름
             * @example 자유형 기초
             */
            programName?: string;
            /**
             * @description 예약 일시
             * @example 2025-05-28 14:00~15:00
             */
            reservationDateTime?: string;
            /**
             * @description 예약 상태
             * @example PENDING
             * @enum {string}
             */
            status?: "AGREE" | "PENDING" | "REJECT" | "CANCEL";
        };
        /** @description 공용시설 예약 단건 조회 [사용자] 응답 DTO */
        FacilityReservationUserDto: {
            /**
             * Format: int64
             * @description 예약 ID
             * @example 1
             */
            reservationId?: number;
            /**
             * @description 예약한 공용시설 이름
             * @example 수영장
             */
            facilityName?: string;
            /**
             * @description 예약한 공용시설 강사 이름
             * @example 박태환
             */
            instructorName?: string;
            /**
             * @description 예약한 공용시설 프로그램 이름
             * @example 자유형 기초
             */
            programName?: string;
            /**
             * @description 예약 일시
             * @example 2025-05-28 14:00~15:00
             */
            reservationDateTime?: string;
            /**
             * Format: date-time
             * @description 예약 신청 일시
             * @example 2025-05-27 13:30
             */
            createdAt?: string;
            /**
             * @description 예약시 요청사항
             * @example (선택사항)
             */
            requestMessage?: string;
            /**
             * @description 예약 상태
             * @example PENDING
             * @enum {string}
             */
            status?: "AGREE" | "PENDING" | "REJECT" | "CANCEL";
        };
        ApiResponseListChatroomDto: {
            /** Format: int32 */
            status?: number;
            success?: boolean;
            message?: string;
            data?: components["schemas"]["ChatroomDto"][];
        };
        ApiResponseListChatMessageDto: {
            /** Format: int32 */
            status?: number;
            success?: boolean;
            message?: string;
            data?: components["schemas"]["ChatMessageDto"][];
        };
        ChatMessageDto: {
            /** Format: int64 */
            userId?: number;
            message?: string;
            userName?: string;
            profileImageUrl?: string;
            apartmentName?: string;
            buildingName?: string;
            unitNumber?: string;
            timestamp?: string;
            /** Format: int64 */
            messageId?: number;
            clientId?: string;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        AdminUserListResponse: {
            /** Format: int64 */
            id?: number;
            userName?: string;
            email?: string;
            phoneNum?: string;
            socialProvider?: string;
            apartmentName?: string;
            buildingName?: string;
            unitNumber?: string;
            roles?: string[];
            /**
             * @description 상태
             * @enum {string}
             */
            status?: "active" | "inactive" | "pending" | "withdrawn";
            /** Format: date-time */
            deletedAt?: string;
            /** Format: date-time */
            lastLoginAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        ApiResponsePageAdminUserListResponse: {
            /** Format: int32 */
            status?: number;
            success?: boolean;
            message?: string;
            data?: components["schemas"]["PageAdminUserListResponse"];
        };
        PageAdminUserListResponse: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["AdminUserListResponse"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        AdminUserDetailResponse: {
            /** Format: int64 */
            id?: number;
            userName?: string;
            email?: string;
            phoneNum?: string;
            socialProvider?: string;
            socialId?: string;
            /** Format: int64 */
            apartmentId?: number;
            apartmentName?: string;
            /** Format: int64 */
            buildingId?: number;
            buildingNumber?: string;
            /** Format: int64 */
            unitId?: number;
            unitNumber?: string;
            roles?: string[];
            /**
             * @description 상태
             * @enum {string}
             */
            status?: "active" | "inactive" | "pending" | "withdrawn";
            leaveReason?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            /** Format: date-time */
            lastLoginAt?: string;
            /** Format: date-time */
            deletedAt?: string;
            profileImageUrl?: string;
        };
        ApiResponseAdminUserDetailResponse: {
            /** Format: int32 */
            status?: number;
            success?: boolean;
            message?: string;
            data?: components["schemas"]["AdminUserDetailResponse"];
        };
        ApiResponsePageObject: {
            /** Format: int32 */
            status?: number;
            success?: boolean;
            message?: string;
            data?: components["schemas"]["PageObject"];
        };
        PageObject: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: Record<string, never>[];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        /** @description 매니저 권한 - 공지사항 게시글 목록 조회 응답 DTO */
        NoticeSummaryResponseDto: {
            /**
             * Format: int64
             * @description 게시글 번호
             * @example 1
             */
            noticeId?: number;
            /**
             * @description 게시글 제목
             * @example 엘레베이터 정기점검 안내
             */
            title?: string;
            /**
             * @description 게시글 작성자
             * @example 관리사무소
             */
            authorName?: string;
            /**
             * Format: int64
             * @description 게시글 대상: 전체/동별 선택 - buildingId
             * @example 1
             */
            buildingId?: number;
            /**
             * Format: date-time
             * @description 게시글 작성일
             * @example 2025-05-15 09:00
             */
            createdAt?: string;
            /**
             * Format: int64
             * @description 게시글 조회수
             * @example 0
             */
            viewCount?: number;
        };
        PageNoticeSummaryResponseDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["NoticeSummaryResponseDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        /** @description 공지사항 게시글 첨부파일 상세 정보 응답 DTO */
        MediaInfoResponseDto: {
            /**
             * Format: int64
             * @description 첨부파일/이미지 ID
             * @example 23
             */
            id?: number;
            /**
             * @description S3 업로드 URL 또는 접근 URL
             * @example https://bucket.s3.ap-northeast-2.amazonaws.com/notice/1/images/abcd.png
             */
            url?: string;
            /**
             * @description 원본 파일명
             * @example 사진1.png
             */
            originalName?: string;
            /**
             * @description 임시 파일 여부
             * @example false
             */
            isTemp?: boolean;
            /**
             * Format: date-time
             * @description 임시 파일 만료일시
             * @example 2025-05-23T09:00:00
             */
            expiresAt?: string;
        };
        ApiResponsePageMenuDTO: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["PageMenuDTO"];
        };
        PageMenuDTO: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["MenuDTO"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        ApiResponseListMenuDTO: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["MenuDTO"][];
        };
        ApiResponseListAdminGradeDTO: {
            success?: boolean;
            message?: string;
            data?: components["schemas"]["AdminGradeDTO"][];
        };
        ApiResponseListLong: {
            success?: boolean;
            message?: string;
            data?: number[];
        };
        /** @description 강사 스케줄 목록 조회 응답 DTO */
        InstructorScheduleSimpleResponseDto: {
            /**
             * Format: int64
             * @description 스케쥴 ID
             * @example 1
             */
            scheduleId?: number;
            /**
             * @description 프로그램명
             * @example 초보반
             */
            scheduleName?: string;
            /**
             * @description 근무 요일
             * @example TUESDAY
             */
            dayOfWeek?: string;
            /**
             * @description 근무 시작 시간
             * @example 15:00
             */
            startTime?: string;
            /**
             * @description 근무 종료 시간
             * @example 18:00
             */
            endTime?: string;
            /**
             * Format: int64
             * @description 예약 단위(분)
             * @example 60
             */
            slotMinutes?: number;
            /**
             * Format: int64
             * @description 한 슬롯(타임)당 최대 수용 가능 인원
             * @example 20
             */
            capacity?: number;
        };
        /** @description 공용시설 사용자별 이용 횟수 DTO */
        UserUsageCountDto: {
            /**
             * @description 사용자 이름
             * @example 짱구
             */
            userName?: string;
            /**
             * @description 사용자 주소(동)
             * @example 101동
             */
            buildingNumber?: string;
            /**
             * @description 사용자 주소(호수)
             * @example 202호
             */
            unitNumber?: string;
            /**
             * Format: int64
             * @description 공용시설 이용 횟수
             * @example 5
             */
            reservationCount?: number;
        };
        /** @description 공용시설 시간대별 이용 횟수 DTO */
        TimePeriodUsageDto: {
            /**
             * @description 시간대
             * @example 오전/오후/저녁/야간
             */
            timePeriod?: string;
            /**
             * Format: int64
             * @description 공용시설 이용 횟수
             * @example 5
             */
            reservationCount?: number;
        };
        /** @description 공용시설 예약 상태 현황 DTO */
        ReservationStatusCountDto: {
            /**
             * @description 예약 상태
             * @example AGREE / PENDING / REJECT / CANCEL
             * @enum {string}
             */
            status?: "AGREE" | "PENDING" | "REJECT" | "CANCEL";
            /**
             * Format: int64
             * @description 횟수
             * @example 5
             */
            count?: number;
        };
        /** @description 공용시설 시설별 이용 횟수 DTO */
        FacilityUsageCountDto: {
            /**
             * @description 공용시설 이름
             * @example 헬스장
             */
            facilityName?: string;
            /**
             * Format: int64
             * @description 공용시설 이용 횟수
             * @example 5
             */
            reservationCount?: number;
        };
        /** @description 공용시설 요일별 이용 횟수 DTO */
        DayOfWeekUsageDto: {
            /**
             * @description 요일
             * @example 월요일
             */
            dayOfWeek?: string;
            /**
             * Format: int64
             * @description 공용시설 이용 횟수
             * @example 5
             */
            reservationCount?: number;
        };
        /** @description 공용시설 취소율 DTO */
        CancellationRatioDto: {
            /**
             * Format: int64
             * @description 전체 예약 수
             * @example 10
             */
            totalReservations?: number;
            /**
             * Format: int64
             * @description 취소된 예약 수
             * @example 2
             */
            totalCancelled?: number;
            /**
             * Format: double
             * @description 취소율
             * @example 0.2
             */
            cancellationRatio?: number;
        };
        /** @description 공용시설 동별 이용 횟수 DTO */
        BuildingUsageCountDto: {
            /**
             * @description 사용자 주소(동)
             * @example 101동
             */
            buildingNumber?: string;
            /**
             * Format: int64
             * @description 공용시설 이용 횟수
             * @example 5
             */
            reservationCount?: number;
        };
        /** @description 공용시설 사용자 예약 목록 조회 [관리자] 응답 DTO */
        FacilityReservationSimpleManagerDto: {
            /**
             * Format: int64
             * @description 예약 ID
             * @example 1
             */
            reservationId?: number;
            /**
             * @description 신청자 이름
             * @example 신짱구
             */
            applicantName?: string;
            /**
             * @description 신청자 주소(동)
             * @example 101동
             */
            building?: string;
            /**
             * @description 신청자 주소(호수)
             * @example 202호
             */
            unit?: string;
            /**
             * @description 신청한 공용시설 이름
             * @example 수영장
             */
            facilityName?: string;
            /**
             * @description 신청한 공용시설 강사 이름
             * @example 박태환
             */
            instructorName?: string;
            /**
             * @description 신청한 예약 일시
             * @example 2025-05-28 14:00~15:00
             */
            reservationDateTime?: string;
            /**
             * @description 예약 상태
             * @example PENDING
             * @enum {string}
             */
            status?: "AGREE" | "PENDING" | "REJECT" | "CANCEL";
        };
        /** @description 공용시설 사용자 예약 상세 조회 [관리자] 응답 DTO */
        FacilityReservationManagerDto: {
            /**
             * Format: int64
             * @description 예약 ID
             * @example 1
             */
            reservationId?: number;
            /**
             * @description 신청자 이름
             * @example 신짱구
             */
            applicantName?: string;
            /**
             * @description 신청자 주소(동)
             * @example 101동
             */
            building?: string;
            /**
             * @description 신청자 주소(호수)
             * @example 202호
             */
            unit?: string;
            /**
             * @description 신청한 공용시설 이름
             * @example 수영장
             */
            facilityName?: string;
            /**
             * @description 신청한 공용시설 강사 이름
             * @example 박태환
             */
            instructorName?: string;
            /**
             * @description 신청한 공용시설 프로그램 이름
             * @example 자유형 초보
             */
            programName?: string;
            /**
             * @description 신청한 예약 일시
             * @example 2025-05-28 14:00~15:00
             */
            reservationDateTime?: string;
            /**
             * Format: date-time
             * @description 신청 일시
             * @example 2025-05-13 10:10
             */
            createdAt?: string;
            /**
             * @description 예약 상태
             * @example PENDING
             * @enum {string}
             */
            status?: "AGREE" | "PENDING" | "REJECT" | "CANCEL";
        };
        ApiResponseListMapStringObject: {
            /** Format: int32 */
            status?: number;
            success?: boolean;
            message?: string;
            data?: {
                [key: string]: Record<string, never>;
            }[];
        };
        ApiResponseListMapStringString: {
            /** Format: int32 */
            status?: number;
            success?: boolean;
            message?: string;
            data?: {
                [key: string]: string;
            }[];
        };
        Page: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: Record<string, never>[];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        PageBuildingResponseDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["BuildingResponseDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        PageUnitResponseDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["UnitResponseDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        PageAdminAccountResponse: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["AdminAccountResponse"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        AdminGrade: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
            /** Format: int32 */
            level?: number;
            name?: string;
            description?: string;
        };
        /** @description 회원 탈퇴 요청 DTO */
        UserWithdrawRequestDto: {
            /**
             * @description 사용자 비밀번호
             * @example password123!
             */
            password?: string;
            /**
             * @description 탈퇴 사유
             * @example 서비스 불만
             */
            leaveReason?: string;
        };
        /** @description 공용시설 예약 취소 요청 DTO */
        FacilityReservationCancelDto: {
            /**
             * @description 예약 취소 사유 선택
             * @example 잘못 예약함
             * @enum {string}
             */
            cancelReasonType?: "PERSONAL_REASON" | "SCHEDULE_CONFLICT" | "ILLNESS" | "MISTAKE" | "OTHER";
            /**
             * @description 취소 사유 입력
             * @example '기타'선택시 입력
             */
            cancelReason?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateOpinionReply: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                replyId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOpinionReplyRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    deleteOpinionReply: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                replyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateComplaint: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                complaintId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateComplaintRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    deleteComplaint: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                complaintId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateComplaintFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                feedbackId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateComplaintFeedbackRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    deleteComplaintFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                feedbackId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommunityRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommunityResponseDto"];
                };
            };
        };
    };
    updateNotice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoticeUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getMenuById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseMenuDTO"];
                };
            };
        };
    };
    updateMenu: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MenuDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseMenuDTO"];
                };
            };
        };
    };
    deleteMenu: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getGradeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseAdminGradeDTO"];
                };
            };
        };
    };
    updateGrade: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminGradeDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseAdminGradeDTO"];
                };
            };
        };
    };
    deleteGrade: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getMenuIdsByGradeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListLong"];
                };
            };
        };
    };
    assignMenusToGrade: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    assignMenusWithOrderToGrade: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: number;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getFacility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilitySimpleResponseDto"];
                };
            };
        };
    };
    updateFacility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FacilityUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteFacility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInstructor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
                instructorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorSimpleResponseDto"];
                };
            };
        };
    };
    updateInstructor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
                instructorId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InstructorUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteInstructor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
                instructorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApartmentById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apartmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApartmentResponseDto"];
                };
            };
        };
    };
    updateApartment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apartmentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApartmentRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApartmentResponseDto"];
                };
            };
        };
    };
    deleteApartment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apartmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUnitById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                unitId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UnitResponseDto"];
                };
            };
        };
    };
    updateUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                unitId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnitRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UnitResponseDto"];
                };
            };
        };
    };
    deleteUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                unitId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBuildingById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                buildingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BuildingResponseDto"];
                };
            };
        };
    };
    updateBuilding: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                buildingId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BuildingRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BuildingResponseDto"];
                };
            };
        };
    };
    deleteBuilding: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                buildingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdminAccountById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AdminAccountResponse"];
                };
            };
        };
    };
    updateAdminAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminAccountRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AdminAccountResponse"];
                };
            };
        };
    };
    deleteAdminAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    resetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordChangeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    registerResidentVehicle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResidentVehicleRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleResponseDto"];
                };
            };
        };
    };
    registerForeignVehicle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForeignVehicleRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleResponseDto"];
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRegistRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 로그아웃 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description 인증되지 않은 사용자 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    uploadProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    multipartFile: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getOpinionReply: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                opinionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    createOpinionReply: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                opinionId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOpinionReplyRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getManagerOpinion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    addManagerOpinion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateManagerOpinionRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    multipartFile: string;
                };
            };
        };
        responses: {
            /** @description 이미지 업로드 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: string;
                    };
                };
            };
            /** @description 업로드 실패 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: string;
                    };
                };
            };
            /** @description 인증 실패 (로그인 필요) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: string;
                    };
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequest"];
            };
        };
        responses: {
            /** @description 비밀번호 변경 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: string;
                    };
                };
            };
            /** @description 입력 값 오류 (비밀번호 정책 위반, 현재 비밀번호 불일치 등) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: string;
                    };
                };
            };
            /** @description 인증 실패 (로그인 필요) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: string;
                    };
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    showAllTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InspectionType"][];
                };
            };
        };
    };
    addNewType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InspectionTypeDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InspectionType"];
                };
            };
        };
    };
    showInspection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InspectionResponseDetailDto"];
                };
            };
        };
    };
    updateInspectionSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InspectionUpdateDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    deleteInspectionSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    createInspectionSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InspectionRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Inspection"];
                };
            };
        };
    };
    compeleteInspection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateInspectionIssue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InspectionIssueDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    makeInspectionIssue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InspectionIssueDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getMyReservations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilityReservationSimpleUserDto"][];
                };
            };
        };
    };
    reservationFacility: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FacilityReservationRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": number;
                };
            };
        };
    };
    requestEntryRecord: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntryRecordResponseDto"];
                };
            };
        };
    };
    exit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntryRecordRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntryRecordResponseDto"];
                };
            };
        };
    };
    enter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntryRecordRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntryRecordResponseDto"];
                };
            };
        };
    };
    getAllComplaint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    createComplaint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateComplaintRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    saveComplaintFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateComplaintFeedbackRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommunityResponseDto"][];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommunityRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommunityResponseDto"];
                };
            };
        };
    };
    pin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommunityResponseDto"];
                };
            };
        };
    };
    getChatroomList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListChatroomDto"];
                };
            };
        };
    };
    createChatroom: {
        parameters: {
            query: {
                title: string;
                categoryCode?: string;
                apartmentId?: number;
                prevRoomId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseChatroomDto"];
                };
            };
        };
    };
    joinChatroom: {
        parameters: {
            query?: {
                currentChatroomId?: number;
            };
            header?: never;
            path: {
                chatroomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseBoolean"];
                };
            };
        };
    };
    leaveChatroom: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chatroomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseBoolean"];
                };
            };
        };
    };
    markMessagesAsReadUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chatroomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseBoolean"];
                };
            };
        };
    };
    verifyCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyCodeRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VerifyCodeResponseDto"];
                };
            };
        };
    };
    sendVerificationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerificationCodeRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VerificationCodeResponseDto"];
                };
            };
        };
    };
    resetPassword_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    findEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FindEmailRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    checkPhone: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PhoneCheckRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PhoneCheckResponseDto"];
                };
            };
        };
    };
    checkEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailCheckRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmailCheckResponseDto"];
                };
            };
        };
    };
    adminRegister: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminRegistrationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    uploadImages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    files: string[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MediaUploadResponseDto"][];
                };
            };
        };
    };
    uploadFiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    files: string[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MediaUploadResponseDto"][];
                };
            };
        };
    };
    createNotice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoticeCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getAllMenus: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePageMenuDTO"];
                };
            };
        };
    };
    createMenu: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MenuDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseMenuDTO"];
                };
            };
        };
    };
    getAllGrades: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListAdminGradeDTO"];
                };
            };
        };
    };
    createGrade: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminGradeDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseAdminGradeDTO"];
                };
            };
        };
    };
    adminLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getFacilityList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilitySimpleResponseDto"][];
                };
            };
        };
    };
    createFacility: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FacilityCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": number;
                };
            };
        };
    };
    getInstructorList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorSimpleResponseDto"][];
                };
            };
        };
    };
    createInstructor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InstructorCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": number;
                };
            };
        };
    };
    getScheduleList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
                instructorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorScheduleSimpleResponseDto"][];
                };
            };
        };
    };
    createSchedules: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
                instructorId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InstructorScheduleCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": number;
                };
            };
        };
    };
    markMessagesAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chatroomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseBoolean"];
                };
            };
        };
    };
    closeChatroom: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chatroomId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseBoolean"];
                };
            };
        };
    };
    assignAdmin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chatroomId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: number;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseBoolean"];
                };
            };
        };
    };
    getAllApartments: {
        parameters: {
            query: {
                /** @description 아파트 이름 검색어 */
                name?: string;
                /** @description 아파트 주소 검색어 */
                address?: string;
                /** @description 우편번호 검색어 */
                zipcode?: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 아파트 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page"];
                };
            };
        };
    };
    createApartment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApartmentRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApartmentResponseDto"];
                };
            };
        };
    };
    createUnit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnitRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UnitResponseDto"];
                };
            };
        };
    };
    createBuilding: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BuildingRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BuildingResponseDto"];
                };
            };
        };
    };
    getAllAdminAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AdminAccountResponse"][];
                };
            };
        };
    };
    createAdminAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminAccountRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AdminAccountResponse"];
                };
            };
        };
    };
    updateVehicle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VehicleUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    inactiveComplaint: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                opinionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateMyInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MyInfoUpdateRequestDto"];
            };
        };
        responses: {
            /** @description 정보 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description 입력 값 오류 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: string;
                    };
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    updateEntryStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                entryRecordId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntryRecordStatusUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntryRecordStatusDto"];
                };
            };
        };
    };
    updateComplaintStatus: {
        parameters: {
            query: {
                status: number;
            };
            header?: never;
            path: {
                complaintId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    inactiveComplaint_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                complaintId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateUserStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminUserStatusUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    updateUserRoles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminUserRoleUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    updateReservationStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FacilityReservationStatusUpdateDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    changeAccountStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: boolean;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AdminAccountResponse"];
                };
            };
        };
    };
    getMyRequests: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleRegistrationInfoDto"][];
                };
            };
        };
    };
    getParkingStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParkingStatusDto"];
                };
            };
        };
    };
    getRegistrations: {
        parameters: {
            query?: {
                isForeign?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleRegistrationInfoDto"][];
                };
            };
        };
    };
    getMyVehicles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleRegistrationInfoDto"][];
                };
            };
        };
    };
    getInvitedApprovedVehicles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleRegistrationInfoDto"][];
                };
            };
        };
    };
    getApprovedVehicles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleRegistrationInfoDto"][];
                };
            };
        };
    };
    getActiveVehicles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleRegistrationInfoDto"][];
                };
            };
        };
    };
    getRegistrations_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VehicleRegistrationInfoDto"][];
                };
            };
        };
    };
    checkPhoneNum: {
        parameters: {
            query: {
                phoneNum: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 사용 가능 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
            /** @description 중복됨 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
        };
    };
    checkEmail_1: {
        parameters: {
            query: {
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 사용 가능 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
            /** @description 중복됨 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
        };
    };
    readNoticeUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["NoticeReadResponseDto"];
                };
            };
        };
    };
    getUserNotices: {
        parameters: {
            query?: {
                buildingId?: number;
                startDate?: string;
                endDate?: string;
                page?: number;
                size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageUserNoticeSummaryResponseDto"];
                };
            };
        };
    };
    getMyInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정보 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MyInfoResponseDto"];
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MyInfoResponseDto"];
                };
            };
        };
    };
    showAllInspections: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InspectionResponseDetailDto"][];
                };
            };
        };
    };
    getInspectionIssue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                issueId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["IssueResponseDetailDto"];
                };
            };
        };
    };
    getFacilityList_1: {
        parameters: {
            query?: {
                keyword?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilitySimpleResponseDto"][];
                };
            };
        };
    };
    getFacility_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilitySimpleResponseDto"];
                };
            };
        };
    };
    getInstructorList_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorSimpleResponseDto"][];
                };
            };
        };
    };
    getInstructorTimeSlots: {
        parameters: {
            query: {
                startDate: string;
                endDate: string;
            };
            header?: never;
            path: {
                facilityId: number;
                instructorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TimeSlotSimpleResponseDto"][];
                };
            };
        };
    };
    getMyReservationDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityReservationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilityReservationUserDto"];
                };
            };
        };
    };
    cancelReservation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityReservationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FacilityReservationCancelDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRecords: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntryRecordResponseDto"][];
                };
            };
        };
    };
    searchComplaintByStatus: {
        parameters: {
            query: {
                status: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getTodayStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getComplaintTodayRate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getComplaintStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getComplaintHandlingRate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getAllComplaintByManager: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getComplaintFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                complaintId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    listBranch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommunityResponseDto"][];
                };
            };
        };
    };
    getChatroomById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chatroomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseChatroomDto"];
                };
            };
        };
    };
    getMessageList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chatroomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListChatMessageDto"];
                };
            };
        };
    };
    getMyChatrooms: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListChatroomDto"];
                };
            };
        };
    };
    getChatroomsByFilter: {
        parameters: {
            query?: {
                categoryCode?: string;
                apartmentId?: number;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListChatroomDto"];
                };
            };
        };
    };
    me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    home: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    checkSocialSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getAllApartments_1: {
        parameters: {
            query?: {
                /** @description 아파트 이름 검색어 */
                name?: string;
                /** @description 아파트 주소 검색어 */
                address?: string;
                /** @description 우편번호 검색어 */
                zipcode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 아파트 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    getApartmentById_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apartmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApartmentResponseDto"];
                };
            };
        };
    };
    getBuildingsByApartment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apartmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 동 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    getUnitById_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                unitId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UnitResponseDto"];
                };
            };
        };
    };
    getBuildingById_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                buildingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BuildingResponseDto"];
                };
            };
        };
    };
    getUnitsByBuilding: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                buildingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 호수 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    getUserList: {
        parameters: {
            query: {
                searchTerm?: string;
                userName?: string;
                email?: string;
                apartmentName?: string;
                role?: "ADMIN" | "USER" | "MODERATOR" | "MANAGER";
                status?: "active" | "inactive" | "pending" | "withdrawn";
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePageAdminUserListResponse"];
                };
            };
        };
    };
    getUserDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseAdminUserDetailResponse"];
                };
            };
        };
    };
    getUserLogs: {
        parameters: {
            query: {
                logType?: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePageObject"];
                };
            };
        };
    };
    exportUsers: {
        parameters: {
            query?: {
                searchTerm?: string;
                role?: "ADMIN" | "USER" | "MODERATOR" | "MANAGER";
                status?: "active" | "inactive" | "pending" | "withdrawn";
                format?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getNoticeList: {
        parameters: {
            query?: {
                buildingId?: number;
                startDate?: string;
                endDate?: string;
                page?: number;
                size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageNoticeSummaryResponseDto"];
                };
            };
        };
    };
    readNotice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["NoticeReadResponseDto"];
                };
            };
        };
    };
    deleteNotice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getImageInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeImageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MediaInfoResponseDto"];
                };
            };
        };
    };
    deleteImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeImageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFileInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeFileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MediaInfoResponseDto"];
                };
            };
        };
    };
    deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                noticeFileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllMenusList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListMenuDTO"];
                };
            };
        };
    };
    getMyMenus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListMenuDTO"];
                };
            };
        };
    };
    getMenusWithSortOrderByGradeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListMenuDTO"];
                };
            };
        };
    };
    me_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getTimeSlots: {
        parameters: {
            query: {
                startDate: string;
                endDate: string;
            };
            header?: never;
            path: {
                facilityId: number;
                instructorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TimeSlotSimpleResponseDto"][];
                };
            };
        };
    };
    getUserUsageCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserUsageCountDto"][];
                };
            };
        };
    };
    getTimePeriodCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TimePeriodUsageDto"][];
                };
            };
        };
    };
    getReservationStatusCounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ReservationStatusCountDto"][];
                };
            };
        };
    };
    getFacilityUsageCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilityUsageCountDto"][];
                };
            };
        };
    };
    getDayOfWeekCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DayOfWeekUsageDto"][];
                };
            };
        };
    };
    getCancellationRatio: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CancellationRatioDto"];
                };
            };
        };
    };
    getBuildingUsageCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BuildingUsageCountDto"][];
                };
            };
        };
    };
    getReservationsByApartment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilityReservationSimpleManagerDto"][];
                };
            };
        };
    };
    getReservationDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FacilityReservationManagerDto"];
                };
            };
        };
    };
    adminCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getAdminChatroomList: {
        parameters: {
            query?: {
                apartmentId?: number;
                categoryCode?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListChatroomDto"];
                };
            };
        };
    };
    getAdminChatroomById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chatroomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseChatroomDto"];
                };
            };
        };
    };
    getAdminChatMessages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chatroomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListChatMessageDto"];
                };
            };
        };
    };
    getApartments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListMapStringObject"];
                };
            };
        };
    };
    getChatCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListMapStringString"];
                };
            };
        };
    };
    getBuildingsByApartment_1: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                apartmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageBuildingResponseDto"];
                };
            };
        };
    };
    getUnitsByBuilding_1: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                buildingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageUnitResponseDto"];
                };
            };
        };
    };
    getAdminAccountsByPage: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                sort?: string;
                direction?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageAdminAccountResponse"];
                };
            };
        };
    };
    getAdminGrades: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AdminGrade"][];
                };
            };
        };
    };
    getAllApartments_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Apartment"][];
                };
            };
        };
    };
    getBuildingsByApartmentId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apartmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Building"][];
                };
            };
        };
    };
    deleteVehicle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    withdrawUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserWithdrawRequestDto"];
            };
        };
        responses: {
            /** @description 회원 탈퇴 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 잘못된 요청 (비밀번호 불일치, 이미 탈퇴한 계정 등) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 인증 실패 (로그인 필요) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    adminLogout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    deleteSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
                instructorId: number;
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTimeSlot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
                instructorId: number;
                timeSlotId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
